CREATE OR REPLACE PACKAGE BODY PKG_030_EXT_WARRANTY
IS
	/* innovent dev */
	G_PKG_NAME CONSTANT VARCHAR2(30) := 'PKG_030_EXT_WARRANTY';
	G_RUN      DATE := TRUNC(SYSDATE, 'MM') ;
	-- Anchors for types that are used throughout the package.
	-- Updates to these should be synchronized with updates to the next block as well.
	--SUBTYPE t_sql_statement IS VARCHAR2(4000);
	--SUBTYPE t_proc_name IS VARCHAR2(100);
	SUBTYPE T_IDENTIFIER IS VARCHAR2(30) ;
	--SUBTYPE t_level_nbr IS NUMBER(3,2);
	--SUBTYPE t_err_detail IS sy_log_error.error_notes%TYPE;
	/***********************************************************************************
	*
	* Author: Jill Blank
	* Description:
	*
	*
	* Parameters:
	*   pi_process_name - The process whose indexes should be recovered.
	*   pi_supress_excep - Indicates whether an exception should be raised to the caller
	*     in the event of a critical failure.  Default is FALSE, indicating they should
	*     be raised to the caller.
	*
	* Revisions:
	*
	*   Change Date    Change Description
	*   -----------    ------------------
	*
	*
	***********************************************************************************/
	PROCEDURE P_PROCESS_ERRORS(
			P_PACKAGE_NAME_IN IN SY_LOG_ERROR.PACKAGE_NAME%TYPE,
			P_PROCEDURE_NAME_IN IN SY_LOG_ERROR.PROCEDURE_NAME%TYPE,
			P_SOURCE_CODE_MARKER_IN IN SY_LOG_ERROR.SOURCE_CODE_MARKER%TYPE,
			P_ORACLE_ERROR_MESSAGE_IN IN SY_LOG_ERROR.ORACLE_ERROR_MESSAGE%TYPE,
			P_ERROR_NOTES_IN IN SY_LOG_ERROR.ERROR_NOTES%TYPE)
	IS
	BEGIN
		-- perform insert into error table
		INSERT
			INTO
				SY_LOG_ERROR
				(
					SY_LOG_ERROR_KEY,
					PACKAGE_NAME,
					PROCEDURE_NAME,
					SOURCE_CODE_MARKER,
					ORACLE_ERROR_MESSAGE,
					ERROR_NOTES,
					ERROR_TIMESTAMP
				)
				VALUES
				(
					SY_LOG_ERROR_SEQ.NEXTVAL,
					P_PACKAGE_NAME_IN,
					P_PROCEDURE_NAME_IN,
					P_SOURCE_CODE_MARKER_IN,
					P_ORACLE_ERROR_MESSAGE_IN,
					P_ERROR_NOTES_IN,
					SYSDATE
				) ;
		COMMIT;
	EXCEPTION
	WHEN OTHERS THEN
		/*If an error occurred while trying to log the error, call the error
		process procedure again and log a message indicating the error */
		P_PROCESS_ERRORS(G_PKG_NAME, 'P_PROCESS_ERRORS', NULL, SUBSTR(SQLERRM, 1, 255), 'An error occurred when attempting to insert into error table') ;
	END P_PROCESS_ERRORS;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load lag rules for all years
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_LAG_RULES
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_LAG_RULES';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		-- insert temporary data into global temp table temp_030_lag_rule_yr_xrf
		INSERT
				/*+ APPEND */
			INTO
				TEMP_030_LAG_RULE_YR_XRF
	WITH
			LAG_RULES AS
			(
				SELECT
						/*+ materialize */
						DISTINCT LAG.REPORT_TYPE REPORT_TYPE,
						GLA.R12_ACCOUNT, -- -SS- ACCOUNT
						(
						CASE WHEN GLA.R12_ENTITY NOT IN('5773', '5588')
								/* -SS- ASX.NATION_CURR='USD' */
							THEN 'USA'
							ELSE 'CAN'
								/* -SS-
								WHEN ASX.NATION_CURR='CAD' THEN 'CAN'
								ELSE ASX.NATION_CURR
								*/
						END) AS COUNTRY_INDICATOR,
						PSA.DESCR GL_ACCOUNT_DESCR,
						TO_NUMBER(LAG.TRX_LAG) LAG_PERIOD,
						LAG.FACTOR CALC_FACTOR
					FROM
						R12_GL_ACCOUNT_SCD
						/* -SS- */
						GLA
					RIGHT JOIN R12_TRANE_ACCOUNTS_PS
						/* -SS- OTR */
						PSA ON GLA.R12_ACCOUNT = PSA.R12_ACCOUNT -- -SS- R12_2_R12
						-- -SS- GLA.ACCOUNT = PSA.ACCOUNT
						-- -SS- CROSS JOIN ???? ACTUATE_SEC_XREF ASX - why is this a cross join?
					CROSS JOIN SY_EXT_LAG_RULES_UPD LAG
					JOIN UD_030_ACCT_RPT_TYP_XRF ART ON LAG.REPORT_TYPE = ART.REPORT_TYPE
					WHERE
						/* -SS- GLA.COMPANY =(
						CASE
						WHEN ASX.PSGL IS NULL THEN GLA.COMPANY
						ELSE ASX.PSGL
						END)
						AND */
						GLA.R12_ACCOUNT = ART.R12_ACCOUNT -- -SS- R12_2_R12
						-- -SS- GLA.ACCOUNT = ART.ACCOUNT
						AND PSA.TRANE_ACCOUNT_IND = 'X'
			)
		SELECT
				REPORT_TYPE,
				NULL AS GL_ACCOUNT, -- -SS- GL_ACCOUNT
				COUNTRY_INDICATOR,
				GL_ACCOUNT_DESCR,
				LAG_PERIOD,
				CALC_FACTOR,
				GENERATED_YEAR,
				R12_ACCOUNT
			FROM
				SY_030_YEAR
			CROSS JOIN LAG_RULES;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'TEMP_030_LAG_RULE_YR_XRF was not loaded due to error') ;
		RAISE;
	END P_LOAD_LAG_RULES;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load temporary cost flow data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_TEMP_COST_FLOW
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_TEMP_COST_FLOW';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		-- insert temporary data into global temp table TEMP_030_COST_FLOW
		INSERT
				/*+ APPEND */
			INTO
				TEMP_030_COST_FLOW
	WITH
			GL_ACCOUNT_FILTER AS
			(
				SELECT
						GLA1.GL_ACCOUNT_SCD_KEY,
						GLA1.R12_ENTITY, -- -SS- COMPANY
						GLA1.R12_ACCOUNT -- -SS- ACCOUNT
					FROM
						R12_GL_ACCOUNT_SCD GLA1 -- -SS-
					INNER JOIN UD_030_ACCT_RPT_TYP_XRF ART ON GLA1.R12_ACCOUNT = ART.R12_ACCOUNT -- -SS- issue 70, R12_2_R12
						-- -SS- GLA1.ACCOUNT = ART.GL_ACCOUNT
			)
		SELECT
				NULL AS BUSINESS_UNIT, -- -SS- COMPANY
				NULL AS GL_ACCOUNT, -- -SS- ACCOUNT
				(
				CASE WHEN GLA.R12_ENTITY NOT IN('5773', '5588')
						/* -SS- ASX.NATION_CURR='USD' */
					THEN 'USA'
					ELSE 'CAN'
						/* -SS-
						WHEN ASX.NATION_CURR='CAD' THEN 'CAN'
						ELSE ASX.NATION_CURR
						*/
				END) AS COUNTRY_INDICATOR,
				MONTHS_BETWEEN(TRUNC(TD.FULL_DATE, 'MONTH'), ADD_MONTHS(TRUNC(TD2.FULL_DATE, 'MONTH'), - 1)) AS START_LAG,
				MONTHS_BETWEEN(TRUNC(TD3.FULL_DATE, 'MONTH'), ADD_MONTHS(TRUNC(TD2.FULL_DATE, 'MONTH'), - 1)) AS SHIP_TO_TRANS_LAG,
				CEIL(ABS(MONTHS_BETWEEN(TD3.FULL_DATE, ADD_MONTHS(TRUNC(SYSDATE, 'MM'), - 1)))) + 1 AS TRANS_TO_CURRENT_LAG,
				TD2.FULL_DATE AS SHIP_DATE,
				TD2.MONTH AS SHIP_MONTH,
				TD2.YEAR AS SHIP_YEAR,
				TD3.FULL_DATE AS TRX_DATE,
				TD3.MONTH AS TRX_MONTH,
				TD3.YEAR AS TRX_YEAR,
				SUM(MLR.EXP_TYPE_AMOUNT * - 1) AS EXPENSE_AMT,
				R12_ENTITY, -- -SS-
				R12_ACCOUNT -- -SS- 
			FROM
				GL_ACCOUNT_FILTER GLA
				/* -SS- LEFT OUTER JOIN ACTUATE_SEC_XREF ASX
				ON GLA.COMPANY = ASX.PSGL */
			JOIN PROD_CODE_XREF_RCPO_DR PRODGRP ON 'CSD' = PRODGRP.GL_LEDGER -- -SS- issue 22, 78
				AND PRODGRP.PRODUCT_CATEGORY IS NOT NULL
			INNER JOIN R12_TRANE_ACCOUNTS_PS PSA ON GLA.R12_ACCOUNT = PSA.R12_ACCOUNT -- -SS- OTR, R12_2_R12
				-- -SS- GLA.ACCOUNT = PSA.ACCOUNT
			JOIN WC_MAT_LBR_ROLLUP MLR ON GLA.GL_ACCOUNT_SCD_KEY = MLR.GL_ACCOUNT_SCD_KEY
			JOIN TIME_DAY TD3          ON MLR.CCN_TRX_DATE_KEY = TD3.TIME_KEY
			JOIN TIME_DAY TD2          ON MLR.ORIGINAL_SHIP_DATE_KEY = TD2.TIME_KEY
			JOIN TIME_DAY TD1          ON MLR.FAIL_DATE_KEY = TD1.TIME_KEY
			JOIN TIME_DAY TD           ON MLR.START_DATE_KEY = TD.TIME_KEY
			JOIN EXPENSE_TYPE_SCD ET USING(EXPENSE_TYPE_SCD_KEY)
			LEFT OUTER JOIN DM_FAL_CLAIMS_WARRANTY_XRF FCW ON MLR.CLAIM_NBR = FCW.CLAIM_NBR AND MLR.DETAIL_NBR = FCW.DETAIL_NBR AND MLR.STEP_NBR = FCW.STEP_NBR
			JOIN CLAIM_TYPE_SCD CTYPES                     ON MLR.CLAIM_TYPE_SCD_KEY = CTYPES.CLAIM_TYPE_SCD_KEY
			JOIN CLAIM_TASK_SCD CTASKS                     ON MLR.CLAIM_TASK_SCD_KEY = CTASKS.CLAIM_TASK_SCD_KEY
			JOIN EXPENSE_TYPE_SCD ETS USING(EXPENSE_TYPE_SCD_KEY)
			JOIN PROD_CODE_SCD PCS              ON MLR.PROD_CODE_SCD_KEY = PCS.PROD_CODE_SCD_KEY AND PCS.PROD_CODE = PRODGRP.MANF_PROD_CODE
			JOIN CUST_ACCOUNT_SCD CACCT         ON MLR.CUST_ACCOUNT_SCD_KEY = CACCT.CUST_ACCOUNT_SCD_KEY
			JOIN SUBMIT_OFFICE_SCD SOS          ON MLR.SUBMIT_OFFICE_SCD_KEY = SOS.SUBMIT_OFFICE_SCD_KEY
			JOIN DM_WAR_CSN_RSV_PCT_REF RES_PCT ON 
			CTYPES.CLAIM_TYPE_DESCR = RES_PCT.CLAIM_TYPE AND 
			ETS.EXPENSE_TYPE_DESCR = RES_PCT.EXPENSE_TYPE_DESCR AND 
			SOS.COMPANY_OWNED_IND = RES_PCT.COMPANY_OWNED_IND AND
			CASE WHEN CACCT.CUST_CREDIT_CATG_CODE = 'Z1' THEN 'Y' ELSE 'N' END = RES_PCT.CUST_CREDIT_CATG_CODE
			WHERE
				TD3.FULL_DATE >= TO_DATE('1/1/2000', 'MM/DD/YYYY')
				AND MLR.CLAIM_TYPE_SCD_KEY <> 11
				AND PSA.TRANE_ACCOUNT_IND = 'X'
			GROUP BY
				R12_ENTITY, -- -SS- COMPANY
				R12_ACCOUNT, -- -SS- ACCOUNT
				(
				CASE WHEN GLA.R12_ENTITY NOT IN('5773', '5588')
						/* -SS- ASX.NATION_CURR='USD' */
					THEN 'USA'
					ELSE 'CAN'
						/* -SS-
						WHEN ASX.NATION_CURR='CAD' THEN 'CAN'
						ELSE ASX.NATION_CURR
						*/
				END),
				MONTHS_BETWEEN(TRUNC(TD.FULL_DATE, 'MONTH'), ADD_MONTHS(TRUNC(TD2.FULL_DATE, 'MONTH'), - 1)),
				MONTHS_BETWEEN(TRUNC(TD3.FULL_DATE, 'MONTH'), ADD_MONTHS(TRUNC(TD2.FULL_DATE, 'MONTH'), - 1)),
				CEIL(ABS(MONTHS_BETWEEN(TD3.FULL_DATE, ADD_MONTHS(TRUNC(SYSDATE, 'MM'), - 1)))) + 1,
				TD2.FULL_DATE,
				TD2.MONTH,
				TD2.YEAR,
				TD3.FULL_DATE,
				TD3.MONTH,
				TD3.YEAR;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'TEMP_030_COST_FLOW was not loaded due to error') ;
		RAISE;
	END P_LOAD_TEMP_COST_FLOW;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load staging cost flow data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_STG_CF
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_STG_CF';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		-- insert data into SY_030_COST_FLOW_STG
		INSERT
				/*+ APPEND */
			INTO
				SY_030_COST_FLOW_STG
				(
					SY_030_COST_FLOW_STG_KEY,
					REPORT_TYPE,
					BUSINESS_UNIT,
					R12_ACCOUNT, -- -SS- GL_ACCOUNT
					GL_ACCOUNT_DESCR,
					COUNTRY_INDICATOR,
					SHIP_DATE,
					SHIP_YEAR,
					SHIP_MONTH,
					TRANSACTION_DATE,
					TRANSACTION_YEAR,
					TRANSACTION_MONTH,
					SHIP_TO_START_LAG,
					SHIP_TO_TRANS_LAG,
					TRANS_TO_CURRENT_LAG,
					LAG_PERIOD,
					LAG_PERIOD_EXP,
					CALC_FACTOR,
					ED_CREATE_DATE,
					ED_CREATE_ID,
					ED_UPDATE_DATE,
					ED_UPDATE_ID,
					GENERATED_YEAR
				)
		SELECT
				SY_030_COST_FLOW_STG_SEQ.NEXTVAL,
				LAG_RULES.REPORT_TYPE,
				TEMP_030_COST_FLOW.R12_ENTITY, -- -SS- BUSINESS_UNIT
				LAG_RULES.R12_ACCOUNT, -- -SS- GL_ACCOUNT
				LAG_RULES.GL_ACCOUNT_DESCR,
				LAG_RULES.COUNTRY_INDICATOR,
				TEMP_030_COST_FLOW.SHIP_DATE,
				TEMP_030_COST_FLOW.SHIP_YEAR,
				TEMP_030_COST_FLOW.SHIP_MONTH,
				TEMP_030_COST_FLOW.TRX_DATE,
				TEMP_030_COST_FLOW.TRX_YEAR,
				TEMP_030_COST_FLOW.TRX_MONTH,
				TEMP_030_COST_FLOW.START_LAG,
				TEMP_030_COST_FLOW.SHIP_TO_TRANS_LAG,
				TEMP_030_COST_FLOW.TRANS_TO_CURRENT_LAG,
				LAG_RULES.LAG_PERIOD,
				NVL(TEMP_030_COST_FLOW.EXPENSE_AMT, 0),
				LAG_RULES.CALC_FACTOR,
				SYSDATE,
				L_PROC_NAME,
				SYSDATE,
				L_PROC_NAME,
				LAG_RULES.GENERATED_YEAR
			FROM
				TEMP_030_LAG_RULE_YR_XRF LAG_RULES
			LEFT OUTER JOIN TEMP_030_COST_FLOW ON 
			LAG_RULES.LAG_PERIOD = TEMP_030_COST_FLOW.SHIP_TO_TRANS_LAG AND 
			LAG_RULES.GENERATED_YEAR = TEMP_030_COST_FLOW.TRX_YEAR AND 
			LAG_RULES.COUNTRY_INDICATOR = TEMP_030_COST_FLOW.COUNTRY_INDICATOR AND 
			LAG_RULES.R12_ACCOUNT = TEMP_030_COST_FLOW.R12_ACCOUNT; -- -SS- R12_2_R12
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'SY_030_COST_FLOW_STG was not loaded due to error') ;
		RAISE;
	END P_LOAD_STG_CF;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load staging cost flow data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_STG_CF_ZEROS
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_STG_CF_ZEROS';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		-- insert data into SY_030_COST_FLOW_STG
		INSERT
				/*+ APPEND */
			INTO
				SY_030_COST_FLOW_STG
				(
					SY_030_COST_FLOW_STG_KEY,
					REPORT_TYPE,
					BUSINESS_UNIT,
					R12_ACCOUNT, -- -SS- GL_ACCOUNT
					GL_ACCOUNT_DESCR,
					COUNTRY_INDICATOR,
					SHIP_DATE,
					SHIP_YEAR,
					SHIP_MONTH,
					TRANSACTION_DATE,
					TRANSACTION_YEAR,
					TRANSACTION_MONTH,
					SHIP_TO_START_LAG,
					SHIP_TO_TRANS_LAG,
					TRANS_TO_CURRENT_LAG,
					LAG_PERIOD,
					LAG_PERIOD_EXP,
					CALC_FACTOR,
					ED_CREATE_DATE,
					ED_CREATE_ID,
					ED_UPDATE_DATE,
					ED_UPDATE_ID,
					GENERATED_YEAR
				)
		SELECT
				SY_030_COST_FLOW_STG_SEQ.NEXTVAL,
				LAG_RULES.REPORT_TYPE AS REPORT_TYPE,
				NULL AS BUSINESS_UNIT,
				LAG_RULES.R12_ACCOUNT, -- -SS- GL_ACCOUNT
				LAG_RULES.GL_ACCOUNT_DESCR AS GL_ACCOUNT_DESCRIPTION,
				LAG_RULES.COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
				NULL AS SHIP_DATE,
				GENERATED_YEAR AS SHIP_YEAR,
				NULL AS SHIP_MONTH,
				NULL AS TRX_DATE,
				NULL AS TRX_YEAR,
				NULL AS TRX_MONTH,
				NULL AS START_LAG,
				NULL AS SHIP_TO_TRANS_LAG,
				NULL AS TRANS_TO_CURRENT_LAG,
				LAG_RULES.LAG_PERIOD AS LAG_PERIOD,
				0 AS LAG_PERIOD_EXP,
				LAG_RULES.CALC_FACTOR,
				SYSDATE,
				L_PROC_NAME,
				SYSDATE,
				L_PROC_NAME,
				LAG_RULES.GENERATED_YEAR
			FROM
				TEMP_030_LAG_RULE_YR_XRF LAG_RULES;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'SY_030_COST_FLOW_STG was not loaded due to error') ;
		RAISE;
	END P_LOAD_STG_CF_ZEROS;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load cost flow pivot data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_CF_PIVOT
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_CF_PIVOT';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DM_030_COST_FLOW_PIVOT
		SELECT
				REPORT_TYPE AS REPORT_TYPE,
				R12_ACCOUNT, -- -SS- GL_ACCOUNT
				GL_ACCOUNT_DESCR AS GL_ACCOUNT_DESCRIPTION,
				COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
				SHIP_YEAR AS SHIP_YEAR,
				MAX(
				CASE WHEN LAG_PERIOD = 1
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_1,
				MAX(
				CASE WHEN LAG_PERIOD = 2
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_2,
				MAX(
				CASE WHEN LAG_PERIOD = 3
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_3,
				MAX(
				CASE WHEN LAG_PERIOD = 4
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_4,
				MAX(
				CASE WHEN LAG_PERIOD = 5
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_5,
				MAX(
				CASE WHEN LAG_PERIOD = 6
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_6,
				MAX(
				CASE WHEN LAG_PERIOD = 7
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_7,
				MAX(
				CASE WHEN LAG_PERIOD = 8
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_8,
				MAX(
				CASE WHEN LAG_PERIOD = 9
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_9,
				MAX(
				CASE WHEN LAG_PERIOD = 10
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_10,
				MAX(
				CASE WHEN LAG_PERIOD = 11
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_11,
				MAX(
				CASE WHEN LAG_PERIOD = 12
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_12,
				MAX(
				CASE WHEN LAG_PERIOD = 13
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_13,
				MAX(
				CASE WHEN LAG_PERIOD = 14
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_14,
				MAX(
				CASE WHEN LAG_PERIOD = 15
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_15,
				MAX(
				CASE WHEN LAG_PERIOD = 16
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_16,
				MAX(
				CASE WHEN LAG_PERIOD = 17
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_17,
				MAX(
				CASE WHEN LAG_PERIOD = 18
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_18,
				MAX(
				CASE WHEN LAG_PERIOD = 19
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_19,
				MAX(
				CASE WHEN LAG_PERIOD = 20
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_20,
				MAX(
				CASE WHEN LAG_PERIOD = 21
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_21,
				MAX(
				CASE WHEN LAG_PERIOD = 22
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_22,
				MAX(
				CASE WHEN LAG_PERIOD = 23
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_23,
				MAX(
				CASE WHEN LAG_PERIOD = 24
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_24,
				MAX(
				CASE WHEN LAG_PERIOD = 25
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_25,
				MAX(
				CASE WHEN LAG_PERIOD = 26
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_26,
				MAX(
				CASE WHEN LAG_PERIOD = 27
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_27,
				MAX(
				CASE WHEN LAG_PERIOD = 28
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_28,
				MAX(
				CASE WHEN LAG_PERIOD = 29
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_29,
				MAX(
				CASE WHEN LAG_PERIOD = 30
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_30,
				MAX(
				CASE WHEN LAG_PERIOD = 31
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_31,
				MAX(
				CASE WHEN LAG_PERIOD = 32
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_32,
				MAX(
				CASE WHEN LAG_PERIOD = 33
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_33,
				MAX(
				CASE WHEN LAG_PERIOD = 34
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_34,
				MAX(
				CASE WHEN LAG_PERIOD = 35
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_35,
				MAX(
				CASE WHEN LAG_PERIOD = 36
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_36,
				MAX(
				CASE WHEN LAG_PERIOD = 37
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_37,
				MAX(
				CASE WHEN LAG_PERIOD = 38
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_38,
				MAX(
				CASE WHEN LAG_PERIOD = 39
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_39,
				MAX(
				CASE WHEN LAG_PERIOD = 40
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_40,
				MAX(
				CASE WHEN LAG_PERIOD = 41
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_41,
				MAX(
				CASE WHEN LAG_PERIOD = 42
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_42,
				MAX(
				CASE WHEN LAG_PERIOD = 43
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_43,
				MAX(
				CASE WHEN LAG_PERIOD = 44
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_44,
				MAX(
				CASE WHEN LAG_PERIOD = 45
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_45,
				MAX(
				CASE WHEN LAG_PERIOD = 46
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_46,
				MAX(
				CASE WHEN LAG_PERIOD = 47
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_47,
				MAX(
				CASE WHEN LAG_PERIOD = 48
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_48,
				MAX(
				CASE WHEN LAG_PERIOD = 49
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_49,
				MAX(
				CASE WHEN LAG_PERIOD = 50
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_50,
				MAX(
				CASE WHEN LAG_PERIOD = 51
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_51,
				MAX(
				CASE WHEN LAG_PERIOD = 52
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_52,
				MAX(
				CASE WHEN LAG_PERIOD = 53
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_53,
				MAX(
				CASE WHEN LAG_PERIOD = 54
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_54,
				MAX(
				CASE WHEN LAG_PERIOD = 55
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_55,
				MAX(
				CASE WHEN LAG_PERIOD = 56
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_56,
				MAX(
				CASE WHEN LAG_PERIOD = 57
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_57,
				MAX(
				CASE WHEN LAG_PERIOD = 58
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_58,
				MAX(
				CASE WHEN LAG_PERIOD = 59
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_59,
				MAX(
				CASE WHEN LAG_PERIOD = 60
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_60,
				MAX(
				CASE WHEN LAG_PERIOD = 61
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_61,
				MAX(
				CASE WHEN LAG_PERIOD = 62
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_62,
				MAX(
				CASE WHEN LAG_PERIOD = 63
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_63,
				MAX(
				CASE WHEN LAG_PERIOD = 64
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_64,
				MAX(
				CASE WHEN LAG_PERIOD = 65
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_65,
				MAX(
				CASE WHEN LAG_PERIOD = 66
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_66,
				MAX(
				CASE WHEN LAG_PERIOD = 67
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_67,
				MAX(
				CASE WHEN LAG_PERIOD = 68
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_68,
				MAX(
				CASE WHEN LAG_PERIOD = 69
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_69,
				MAX(
				CASE WHEN LAG_PERIOD = 70
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_70,
				MAX(
				CASE WHEN LAG_PERIOD = 71
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_71,
				MAX(
				CASE WHEN LAG_PERIOD = 72
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_72,
				MAX(
				CASE WHEN LAG_PERIOD = 73
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_73,
				MAX(
				CASE WHEN LAG_PERIOD = 74
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_74,
				MAX(
				CASE WHEN LAG_PERIOD = 75
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_75,
				MAX(
				CASE WHEN LAG_PERIOD = 76
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_76,
				MAX(
				CASE WHEN LAG_PERIOD = 77
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_77,
				MAX(
				CASE WHEN LAG_PERIOD = 78
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_78,
				MAX(
				CASE WHEN LAG_PERIOD = 79
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_79,
				MAX(
				CASE WHEN LAG_PERIOD = 80
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_80,
				MAX(
				CASE WHEN LAG_PERIOD = 81
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_81,
				MAX(
				CASE WHEN LAG_PERIOD = 82
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_82,
				MAX(
				CASE WHEN LAG_PERIOD = 83
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_83,
				MAX(
				CASE WHEN LAG_PERIOD = 84
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_84,
				MAX(
				CASE WHEN LAG_PERIOD = 85
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_85,
				MAX(
				CASE WHEN LAG_PERIOD = 86
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_86,
				MAX(
				CASE WHEN LAG_PERIOD = 87
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_87,
				MAX(
				CASE WHEN LAG_PERIOD = 88
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_88,
				MAX(
				CASE WHEN LAG_PERIOD = 89
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_89,
				MAX(
				CASE WHEN LAG_PERIOD = 90
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_90,
				MAX(
				CASE WHEN LAG_PERIOD = 91
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_91,
				MAX(
				CASE WHEN LAG_PERIOD = 92
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_92,
				MAX(
				CASE WHEN LAG_PERIOD = 93
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_93,
				MAX(
				CASE WHEN LAG_PERIOD = 94
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_94,
				MAX(
				CASE WHEN LAG_PERIOD = 95
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_95,
				MAX(
				CASE WHEN LAG_PERIOD = 96
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_96,
				MAX(
				CASE WHEN LAG_PERIOD = 97
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_97,
				MAX(
				CASE WHEN LAG_PERIOD = 98
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_98,
				MAX(
				CASE WHEN LAG_PERIOD = 99
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_99,
				MAX(
				CASE WHEN LAG_PERIOD = 100
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_100,
				MAX(
				CASE WHEN LAG_PERIOD = 101
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_101,
				MAX(
				CASE WHEN LAG_PERIOD = 102
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_102,
				MAX(
				CASE WHEN LAG_PERIOD = 103
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_103,
				MAX(
				CASE WHEN LAG_PERIOD = 104
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_104,
				MAX(
				CASE WHEN LAG_PERIOD = 105
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_105,
				MAX(
				CASE WHEN LAG_PERIOD = 106
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_106,
				MAX(
				CASE WHEN LAG_PERIOD = 107
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_107,
				MAX(
				CASE WHEN LAG_PERIOD = 108
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_108,
				MAX(
				CASE WHEN LAG_PERIOD = 109
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_109,
				MAX(
				CASE WHEN LAG_PERIOD = 110
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_110,
				MAX(
				CASE WHEN LAG_PERIOD = 111
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_111,
				MAX(
				CASE WHEN LAG_PERIOD = 112
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_112,
				MAX(
				CASE WHEN LAG_PERIOD = 113
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_113,
				MAX(
				CASE WHEN LAG_PERIOD = 114
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_114,
				MAX(
				CASE WHEN LAG_PERIOD = 115
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_115,
				MAX(
				CASE WHEN LAG_PERIOD = 116
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_116,
				MAX(
				CASE WHEN LAG_PERIOD = 117
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_117,
				MAX(
				CASE WHEN LAG_PERIOD = 118
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_118,
				MAX(
				CASE WHEN LAG_PERIOD = 119
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_119,
				MAX(
				CASE WHEN LAG_PERIOD = 120
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_120,
				MAX(
				CASE WHEN LAG_PERIOD = 121
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_121,
				MAX(
				CASE WHEN LAG_PERIOD = 122
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_122,
				MAX(
				CASE WHEN LAG_PERIOD = 123
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_123,
				MAX(
				CASE WHEN LAG_PERIOD = 124
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_124,
				MAX(
				CASE WHEN LAG_PERIOD = 125
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_125,
				MAX(
				CASE WHEN LAG_PERIOD = 126
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_126,
				MAX(
				CASE WHEN LAG_PERIOD = 127
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_127,
				MAX(
				CASE WHEN LAG_PERIOD = 128
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_128,
				MAX(
				CASE WHEN LAG_PERIOD = 129
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_129,
				MAX(
				CASE WHEN LAG_PERIOD = 130
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_130,
				MAX(
				CASE WHEN LAG_PERIOD = 131
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_131,
				MAX(
				CASE WHEN LAG_PERIOD = 132
					THEN LAG_PERIOD
				END) AS LAG_PERIOD_132,
				SUM(
				CASE WHEN LAG_PERIOD = 1
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_1,
				SUM(
				CASE WHEN LAG_PERIOD = 2
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_2,
				SUM(
				CASE WHEN LAG_PERIOD = 3
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_3,
				SUM(
				CASE WHEN LAG_PERIOD = 4
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_4,
				SUM(
				CASE WHEN LAG_PERIOD = 5
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_5,
				SUM(
				CASE WHEN LAG_PERIOD = 6
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_6,
				SUM(
				CASE WHEN LAG_PERIOD = 7
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_7,
				SUM(
				CASE WHEN LAG_PERIOD = 8
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_8,
				SUM(
				CASE WHEN LAG_PERIOD = 9
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_9,
				SUM(
				CASE WHEN LAG_PERIOD = 10
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_10,
				SUM(
				CASE WHEN LAG_PERIOD = 11
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_11,
				SUM(
				CASE WHEN LAG_PERIOD = 12
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_12,
				SUM(
				CASE WHEN LAG_PERIOD = 13
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_13,
				SUM(
				CASE WHEN LAG_PERIOD = 14
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_14,
				SUM(
				CASE WHEN LAG_PERIOD = 15
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_15,
				SUM(
				CASE WHEN LAG_PERIOD = 16
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_16,
				SUM(
				CASE WHEN LAG_PERIOD = 17
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_17,
				SUM(
				CASE WHEN LAG_PERIOD = 18
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_18,
				SUM(
				CASE WHEN LAG_PERIOD = 19
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_19,
				SUM(
				CASE WHEN LAG_PERIOD = 20
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_20,
				SUM(
				CASE WHEN LAG_PERIOD = 21
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_21,
				SUM(
				CASE WHEN LAG_PERIOD = 22
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_22,
				SUM(
				CASE WHEN LAG_PERIOD = 23
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_23,
				SUM(
				CASE WHEN LAG_PERIOD = 24
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_24,
				SUM(
				CASE WHEN LAG_PERIOD = 25
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_25,
				SUM(
				CASE WHEN LAG_PERIOD = 26
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_26,
				SUM(
				CASE WHEN LAG_PERIOD = 27
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_27,
				SUM(
				CASE WHEN LAG_PERIOD = 28
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_28,
				SUM(
				CASE WHEN LAG_PERIOD = 29
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_29,
				SUM(
				CASE WHEN LAG_PERIOD = 30
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_30,
				SUM(
				CASE WHEN LAG_PERIOD = 31
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_31,
				SUM(
				CASE WHEN LAG_PERIOD = 32
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_32,
				SUM(
				CASE WHEN LAG_PERIOD = 33
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_33,
				SUM(
				CASE WHEN LAG_PERIOD = 34
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_34,
				SUM(
				CASE WHEN LAG_PERIOD = 35
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_35,
				SUM(
				CASE WHEN LAG_PERIOD = 36
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_36,
				SUM(
				CASE WHEN LAG_PERIOD = 37
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_37,
				SUM(
				CASE WHEN LAG_PERIOD = 38
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_38,
				SUM(
				CASE WHEN LAG_PERIOD = 39
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_39,
				SUM(
				CASE WHEN LAG_PERIOD = 40
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_40,
				SUM(
				CASE WHEN LAG_PERIOD = 41
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_41,
				SUM(
				CASE WHEN LAG_PERIOD = 42
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_42,
				SUM(
				CASE WHEN LAG_PERIOD = 43
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_43,
				SUM(
				CASE WHEN LAG_PERIOD = 44
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_44,
				SUM(
				CASE WHEN LAG_PERIOD = 45
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_45,
				SUM(
				CASE WHEN LAG_PERIOD = 46
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_46,
				SUM(
				CASE WHEN LAG_PERIOD = 47
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_47,
				SUM(
				CASE WHEN LAG_PERIOD = 48
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_48,
				SUM(
				CASE WHEN LAG_PERIOD = 49
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_49,
				SUM(
				CASE WHEN LAG_PERIOD = 50
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_50,
				SUM(
				CASE WHEN LAG_PERIOD = 51
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_51,
				SUM(
				CASE WHEN LAG_PERIOD = 52
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_52,
				SUM(
				CASE WHEN LAG_PERIOD = 53
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_53,
				SUM(
				CASE WHEN LAG_PERIOD = 54
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_54,
				SUM(
				CASE WHEN LAG_PERIOD = 55
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_55,
				SUM(
				CASE WHEN LAG_PERIOD = 56
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_56,
				SUM(
				CASE WHEN LAG_PERIOD = 57
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_57,
				SUM(
				CASE WHEN LAG_PERIOD = 58
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_58,
				SUM(
				CASE WHEN LAG_PERIOD = 59
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_59,
				SUM(
				CASE WHEN LAG_PERIOD = 60
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_60,
				SUM(
				CASE WHEN LAG_PERIOD = 61
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_61,
				SUM(
				CASE WHEN LAG_PERIOD = 62
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_62,
				SUM(
				CASE WHEN LAG_PERIOD = 63
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_63,
				SUM(
				CASE WHEN LAG_PERIOD = 64
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_64,
				SUM(
				CASE WHEN LAG_PERIOD = 65
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_65,
				SUM(
				CASE WHEN LAG_PERIOD = 66
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_66,
				SUM(
				CASE WHEN LAG_PERIOD = 67
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_67,
				SUM(
				CASE WHEN LAG_PERIOD = 68
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_68,
				SUM(
				CASE WHEN LAG_PERIOD = 69
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_69,
				SUM(
				CASE WHEN LAG_PERIOD = 70
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_70,
				SUM(
				CASE WHEN LAG_PERIOD = 71
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_71,
				SUM(
				CASE WHEN LAG_PERIOD = 72
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_72,
				SUM(
				CASE WHEN LAG_PERIOD = 73
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_73,
				SUM(
				CASE WHEN LAG_PERIOD = 74
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_74,
				SUM(
				CASE WHEN LAG_PERIOD = 75
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_75,
				SUM(
				CASE WHEN LAG_PERIOD = 76
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_76,
				SUM(
				CASE WHEN LAG_PERIOD = 77
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_77,
				SUM(
				CASE WHEN LAG_PERIOD = 78
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_78,
				SUM(
				CASE WHEN LAG_PERIOD = 79
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_79,
				SUM(
				CASE WHEN LAG_PERIOD = 80
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_80,
				SUM(
				CASE WHEN LAG_PERIOD = 81
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_81,
				SUM(
				CASE WHEN LAG_PERIOD = 82
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_82,
				SUM(
				CASE WHEN LAG_PERIOD = 83
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_83,
				SUM(
				CASE WHEN LAG_PERIOD = 84
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_84,
				SUM(
				CASE WHEN LAG_PERIOD = 85
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_85,
				SUM(
				CASE WHEN LAG_PERIOD = 86
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_86,
				SUM(
				CASE WHEN LAG_PERIOD = 87
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_87,
				SUM(
				CASE WHEN LAG_PERIOD = 88
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_88,
				SUM(
				CASE WHEN LAG_PERIOD = 89
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_89,
				SUM(
				CASE WHEN LAG_PERIOD = 90
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_90,
				SUM(
				CASE WHEN LAG_PERIOD = 91
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_91,
				SUM(
				CASE WHEN LAG_PERIOD = 92
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_92,
				SUM(
				CASE WHEN LAG_PERIOD = 93
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_93,
				SUM(
				CASE WHEN LAG_PERIOD = 94
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_94,
				SUM(
				CASE WHEN LAG_PERIOD = 95
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_95,
				SUM(
				CASE WHEN LAG_PERIOD = 96
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_96,
				SUM(
				CASE WHEN LAG_PERIOD = 97
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_97,
				SUM(
				CASE WHEN LAG_PERIOD = 98
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_98,
				SUM(
				CASE WHEN LAG_PERIOD = 99
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_99,
				SUM(
				CASE WHEN LAG_PERIOD = 100
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_100,
				SUM(
				CASE WHEN LAG_PERIOD = 101
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_101,
				SUM(
				CASE WHEN LAG_PERIOD = 102
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_102,
				SUM(
				CASE WHEN LAG_PERIOD = 103
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_103,
				SUM(
				CASE WHEN LAG_PERIOD = 104
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_104,
				SUM(
				CASE WHEN LAG_PERIOD = 105
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_105,
				SUM(
				CASE WHEN LAG_PERIOD = 106
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_106,
				SUM(
				CASE WHEN LAG_PERIOD = 107
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_107,
				SUM(
				CASE WHEN LAG_PERIOD = 108
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_108,
				SUM(
				CASE WHEN LAG_PERIOD = 109
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_109,
				SUM(
				CASE WHEN LAG_PERIOD = 110
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_110,
				SUM(
				CASE WHEN LAG_PERIOD = 111
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_111,
				SUM(
				CASE WHEN LAG_PERIOD = 112
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_112,
				SUM(
				CASE WHEN LAG_PERIOD = 113
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_113,
				SUM(
				CASE WHEN LAG_PERIOD = 114
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_114,
				SUM(
				CASE WHEN LAG_PERIOD = 115
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_115,
				SUM(
				CASE WHEN LAG_PERIOD = 116
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_116,
				SUM(
				CASE WHEN LAG_PERIOD = 117
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_117,
				SUM(
				CASE WHEN LAG_PERIOD = 118
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_118,
				SUM(
				CASE WHEN LAG_PERIOD = 119
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_119,
				SUM(
				CASE WHEN LAG_PERIOD = 120
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_120,
				SUM(
				CASE WHEN LAG_PERIOD = 121
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_121,
				SUM(
				CASE WHEN LAG_PERIOD = 122
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_122,
				SUM(
				CASE WHEN LAG_PERIOD = 123
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_123,
				SUM(
				CASE WHEN LAG_PERIOD = 124
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_124,
				SUM(
				CASE WHEN LAG_PERIOD = 125
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_125,
				SUM(
				CASE WHEN LAG_PERIOD = 126
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_126,
				SUM(
				CASE WHEN LAG_PERIOD = 127
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_127,
				SUM(
				CASE WHEN LAG_PERIOD = 128
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_128,
				SUM(
				CASE WHEN LAG_PERIOD = 129
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_129,
				SUM(
				CASE WHEN LAG_PERIOD = 130
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_130,
				SUM(
				CASE WHEN LAG_PERIOD = 131
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_131,
				SUM(
				CASE WHEN LAG_PERIOD = 132
					THEN LAG_PERIOD_EXP
				END) AS LAG_PERIOD_EXP_132,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID
			FROM
				DBO.SY_030_COST_FLOW_STG
			GROUP BY
				REPORT_TYPE,
				R12_ACCOUNT, -- -SS- GL_ACCOUNT
				GL_ACCOUNT_DESCR,
				COUNTRY_INDICATOR,
				SHIP_YEAR,
				SYSDATE,
				L_PROC_NAME,
				SYSDATE,
				L_PROC_NAME;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_COST_FLOW_PIVOT was not loaded due to error') ;
		RAISE;
	END P_LOAD_CF_PIVOT;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load cost flow calculated summary data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_SUMMARY_STG_CF
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_SUMMARY_STG_CF';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT INTO DBO.SY_030_CALC_SUM_STG
		SELECT
				SY_030_CALC_SUM_STG_SEQ.NEXTVAL AS SY_030_CALC_SUM_STG_KEY,
				REPORT_TYPE AS REPORT_TYPE,
				NULL AS R12_ACCOUNT, -- -SS- GL_ACCOUNT
				GL_ACCOUNT_DESCR AS GL_ACCOUNT_DESCRIPTION,
				COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
				START_SHIP_YEAR AS START_SHIP_YEAR,
				END_SHIP_YEAR AS END_SHIP_YEAR,
				LAG_PERIOD AS LAG_PERIOD,
				CALC_FACTOR AS CALC_FACTOR,
				NVL(COST_FLOW_SELECTED_DLR, 0) AS COST_FLOW_SELECTED_DLR,
				NVL(RATIO_TO_REPORT(COST_FLOW_SELECTED_DLR) OVER(PARTITION BY REPORT_TYPE, R12_ACCOUNT, COUNTRY_INDICATOR), 0) AS COST_FLOW_RATE, -- -SS- GL_ACCOUNT
				NVL(RATIO_TO_REPORT(CALC_FACTOR) OVER(PARTITION BY REPORT_TYPE, R12_ACCOUNT, COUNTRY_INDICATOR), 0) AS STRAIGHT_LINE_RATE, -- -SS- GL_ACCOUNT
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID,
				R12_ACCOUNT -- -SS-
			FROM
				(
					SELECT DISTINCT
							CFS.REPORT_TYPE,
							CFS.R12_ACCOUNT, -- -SS- GL_ACCOUNT
							CFS.GL_ACCOUNT_DESCR,
							CFS.COUNTRY_INDICATOR,
							ATR.START_SHIP_YEAR,
							ATR.END_SHIP_YEAR,
							CFS.LAG_PERIOD,
							CFS.CALC_FACTOR,
							SUM(LAG_PERIOD_EXP * CALC_FACTOR) AS COST_FLOW_SELECTED_DLR
						FROM
							DBO.UD_030_ACCOUNT_RULES ATR
							INNER JOIN
							DBO.SY_030_COST_FLOW_STG CFS
							ON ATR.R12_ACCOUNT = CFS.R12_ACCOUNT -- -SS- GL_ACCOUNT, issue 84, R12_2_R12
						WHERE
							AND CFS.SHIP_YEAR BETWEEN ATR.START_SHIP_YEAR AND ATR.END_SHIP_YEAR
						GROUP BY
							CFS.REPORT_TYPE,
							CFS.R12_ACCOUNT, -- -SS- GL_ACCOUNT
							CFS.GL_ACCOUNT_DESCR,
							CFS.COUNTRY_INDICATOR,
							ATR.START_SHIP_YEAR,
							ATR.END_SHIP_YEAR,
							CFS.LAG_PERIOD,
							CFS.CALC_FACTOR
				) ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'SY_030_CALC_SUM_STG was not loaded due to error') ;
		RAISE;
	END P_LOAD_SUMMARY_STG_CF;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load temporary table cost flow calculated summary pivot data for Calc factor and Cost Flow DLR amount
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_TEMP_030_CS_CF_DLR_PVT
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_TEMP_030_CS_CF_DLR_PVT';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT
				/*+ APPEND */
			INTO
				DBO.TEMP_030_CS_CF_DLR_PVT
				(
					SELECT
							REPORT_TYPE AS REPORT_TYPE,
							NULL AS GL_ACCOUNT, -- -SS- GL_ACCOUNT
							GL_ACCOUNT_DESCR,
							COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
							START_SHIP_YEAR,
							END_SHIP_YEAR,
							MAX(
							CASE WHEN LAG_PERIOD = 1
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_1,
							MAX(
							CASE WHEN LAG_PERIOD = 2
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_2,
							MAX(
							CASE WHEN LAG_PERIOD = 3
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_3,
							MAX(
							CASE WHEN LAG_PERIOD = 4
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_4,
							MAX(
							CASE WHEN LAG_PERIOD = 5
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_5,
							MAX(
							CASE WHEN LAG_PERIOD = 6
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_6,
							MAX(
							CASE WHEN LAG_PERIOD = 7
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_7,
							MAX(
							CASE WHEN LAG_PERIOD = 8
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_8,
							MAX(
							CASE WHEN LAG_PERIOD = 9
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_9,
							MAX(
							CASE WHEN LAG_PERIOD = 10
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_10,
							MAX(
							CASE WHEN LAG_PERIOD = 11
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_11,
							MAX(
							CASE WHEN LAG_PERIOD = 12
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_12,
							MAX(
							CASE WHEN LAG_PERIOD = 13
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_13,
							MAX(
							CASE WHEN LAG_PERIOD = 14
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_14,
							MAX(
							CASE WHEN LAG_PERIOD = 15
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_15,
							MAX(
							CASE WHEN LAG_PERIOD = 16
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_16,
							MAX(
							CASE WHEN LAG_PERIOD = 17
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_17,
							MAX(
							CASE WHEN LAG_PERIOD = 18
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_18,
							MAX(
							CASE WHEN LAG_PERIOD = 19
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_19,
							MAX(
							CASE WHEN LAG_PERIOD = 20
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_20,
							MAX(
							CASE WHEN LAG_PERIOD = 21
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_21,
							MAX(
							CASE WHEN LAG_PERIOD = 22
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_22,
							MAX(
							CASE WHEN LAG_PERIOD = 23
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_23,
							MAX(
							CASE WHEN LAG_PERIOD = 24
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_24,
							MAX(
							CASE WHEN LAG_PERIOD = 25
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_25,
							MAX(
							CASE WHEN LAG_PERIOD = 26
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_26,
							MAX(
							CASE WHEN LAG_PERIOD = 27
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_27,
							MAX(
							CASE WHEN LAG_PERIOD = 28
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_28,
							MAX(
							CASE WHEN LAG_PERIOD = 29
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_29,
							MAX(
							CASE WHEN LAG_PERIOD = 30
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_30,
							MAX(
							CASE WHEN LAG_PERIOD = 31
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_31,
							MAX(
							CASE WHEN LAG_PERIOD = 32
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_32,
							MAX(
							CASE WHEN LAG_PERIOD = 33
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_33,
							MAX(
							CASE WHEN LAG_PERIOD = 34
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_34,
							MAX(
							CASE WHEN LAG_PERIOD = 35
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_35,
							MAX(
							CASE WHEN LAG_PERIOD = 36
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_36,
							MAX(
							CASE WHEN LAG_PERIOD = 37
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_37,
							MAX(
							CASE WHEN LAG_PERIOD = 38
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_38,
							MAX(
							CASE WHEN LAG_PERIOD = 39
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_39,
							MAX(
							CASE WHEN LAG_PERIOD = 40
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_40,
							MAX(
							CASE WHEN LAG_PERIOD = 41
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_41,
							MAX(
							CASE WHEN LAG_PERIOD = 42
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_42,
							MAX(
							CASE WHEN LAG_PERIOD = 43
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_43,
							MAX(
							CASE WHEN LAG_PERIOD = 44
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_44,
							MAX(
							CASE WHEN LAG_PERIOD = 45
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_45,
							MAX(
							CASE WHEN LAG_PERIOD = 46
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_46,
							MAX(
							CASE WHEN LAG_PERIOD = 47
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_47,
							MAX(
							CASE WHEN LAG_PERIOD = 48
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_48,
							MAX(
							CASE WHEN LAG_PERIOD = 49
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_49,
							MAX(
							CASE WHEN LAG_PERIOD = 50
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_50,
							MAX(
							CASE WHEN LAG_PERIOD = 51
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_51,
							MAX(
							CASE WHEN LAG_PERIOD = 52
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_52,
							MAX(
							CASE WHEN LAG_PERIOD = 53
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_53,
							MAX(
							CASE WHEN LAG_PERIOD = 54
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_54,
							MAX(
							CASE WHEN LAG_PERIOD = 55
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_55,
							MAX(
							CASE WHEN LAG_PERIOD = 56
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_56,
							MAX(
							CASE WHEN LAG_PERIOD = 57
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_57,
							MAX(
							CASE WHEN LAG_PERIOD = 58
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_58,
							MAX(
							CASE WHEN LAG_PERIOD = 59
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_59,
							MAX(
							CASE WHEN LAG_PERIOD = 60
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_60,
							MAX(
							CASE WHEN LAG_PERIOD = 61
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_61,
							MAX(
							CASE WHEN LAG_PERIOD = 62
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_62,
							MAX(
							CASE WHEN LAG_PERIOD = 63
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_63,
							MAX(
							CASE WHEN LAG_PERIOD = 64
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_64,
							MAX(
							CASE WHEN LAG_PERIOD = 65
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_65,
							MAX(
							CASE WHEN LAG_PERIOD = 66
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_66,
							MAX(
							CASE WHEN LAG_PERIOD = 67
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_67,
							MAX(
							CASE WHEN LAG_PERIOD = 68
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_68,
							MAX(
							CASE WHEN LAG_PERIOD = 69
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_69,
							MAX(
							CASE WHEN LAG_PERIOD = 70
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_70,
							MAX(
							CASE WHEN LAG_PERIOD = 71
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_71,
							MAX(
							CASE WHEN LAG_PERIOD = 72
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_72,
							MAX(
							CASE WHEN LAG_PERIOD = 73
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_73,
							MAX(
							CASE WHEN LAG_PERIOD = 74
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_74,
							MAX(
							CASE WHEN LAG_PERIOD = 75
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_75,
							MAX(
							CASE WHEN LAG_PERIOD = 76
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_76,
							MAX(
							CASE WHEN LAG_PERIOD = 77
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_77,
							MAX(
							CASE WHEN LAG_PERIOD = 78
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_78,
							MAX(
							CASE WHEN LAG_PERIOD = 79
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_79,
							MAX(
							CASE WHEN LAG_PERIOD = 80
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_80,
							MAX(
							CASE WHEN LAG_PERIOD = 81
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_81,
							MAX(
							CASE WHEN LAG_PERIOD = 82
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_82,
							MAX(
							CASE WHEN LAG_PERIOD = 83
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_83,
							MAX(
							CASE WHEN LAG_PERIOD = 84
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_84,
							MAX(
							CASE WHEN LAG_PERIOD = 85
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_85,
							MAX(
							CASE WHEN LAG_PERIOD = 86
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_86,
							MAX(
							CASE WHEN LAG_PERIOD = 87
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_87,
							MAX(
							CASE WHEN LAG_PERIOD = 88
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_88,
							MAX(
							CASE WHEN LAG_PERIOD = 89
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_89,
							MAX(
							CASE WHEN LAG_PERIOD = 90
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_90,
							MAX(
							CASE WHEN LAG_PERIOD = 91
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_91,
							MAX(
							CASE WHEN LAG_PERIOD = 92
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_92,
							MAX(
							CASE WHEN LAG_PERIOD = 93
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_93,
							MAX(
							CASE WHEN LAG_PERIOD = 94
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_94,
							MAX(
							CASE WHEN LAG_PERIOD = 95
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_95,
							MAX(
							CASE WHEN LAG_PERIOD = 96
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_96,
							MAX(
							CASE WHEN LAG_PERIOD = 97
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_97,
							MAX(
							CASE WHEN LAG_PERIOD = 98
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_98,
							MAX(
							CASE WHEN LAG_PERIOD = 99
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_99,
							MAX(
							CASE WHEN LAG_PERIOD = 100
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_100,
							MAX(
							CASE WHEN LAG_PERIOD = 101
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_101,
							MAX(
							CASE WHEN LAG_PERIOD = 102
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_102,
							MAX(
							CASE WHEN LAG_PERIOD = 103
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_103,
							MAX(
							CASE WHEN LAG_PERIOD = 104
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_104,
							MAX(
							CASE WHEN LAG_PERIOD = 105
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_105,
							MAX(
							CASE WHEN LAG_PERIOD = 106
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_106,
							MAX(
							CASE WHEN LAG_PERIOD = 107
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_107,
							MAX(
							CASE WHEN LAG_PERIOD = 108
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_108,
							MAX(
							CASE WHEN LAG_PERIOD = 109
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_109,
							MAX(
							CASE WHEN LAG_PERIOD = 110
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_110,
							MAX(
							CASE WHEN LAG_PERIOD = 111
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_111,
							MAX(
							CASE WHEN LAG_PERIOD = 112
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_112,
							MAX(
							CASE WHEN LAG_PERIOD = 113
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_113,
							MAX(
							CASE WHEN LAG_PERIOD = 114
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_114,
							MAX(
							CASE WHEN LAG_PERIOD = 115
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_115,
							MAX(
							CASE WHEN LAG_PERIOD = 116
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_116,
							MAX(
							CASE WHEN LAG_PERIOD = 117
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_117,
							MAX(
							CASE WHEN LAG_PERIOD = 118
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_118,
							MAX(
							CASE WHEN LAG_PERIOD = 119
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_119,
							MAX(
							CASE WHEN LAG_PERIOD = 120
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_120,
							MAX(
							CASE WHEN LAG_PERIOD = 121
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_121,
							MAX(
							CASE WHEN LAG_PERIOD = 122
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_122,
							MAX(
							CASE WHEN LAG_PERIOD = 123
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_123,
							MAX(
							CASE WHEN LAG_PERIOD = 124
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_124,
							MAX(
							CASE WHEN LAG_PERIOD = 125
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_125,
							MAX(
							CASE WHEN LAG_PERIOD = 126
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_126,
							MAX(
							CASE WHEN LAG_PERIOD = 127
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_127,
							MAX(
							CASE WHEN LAG_PERIOD = 128
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_128,
							MAX(
							CASE WHEN LAG_PERIOD = 129
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_129,
							MAX(
							CASE WHEN LAG_PERIOD = 130
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_130,
							MAX(
							CASE WHEN LAG_PERIOD = 131
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_131,
							MAX(
							CASE WHEN LAG_PERIOD = 132
								THEN CALC_FACTOR
							END) AS CALC_FACTOR_132,
							SUM(
							CASE WHEN LAG_PERIOD = 1
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_1,
							SUM(
							CASE WHEN LAG_PERIOD = 2
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_2,
							SUM(
							CASE WHEN LAG_PERIOD = 3
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_3,
							SUM(
							CASE WHEN LAG_PERIOD = 4
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_4,
							SUM(
							CASE WHEN LAG_PERIOD = 5
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_5,
							SUM(
							CASE WHEN LAG_PERIOD = 6
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_6,
							SUM(
							CASE WHEN LAG_PERIOD = 7
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_7,
							SUM(
							CASE WHEN LAG_PERIOD = 8
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_8,
							SUM(
							CASE WHEN LAG_PERIOD = 9
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_9,
							SUM(
							CASE WHEN LAG_PERIOD = 10
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_10,
							SUM(
							CASE WHEN LAG_PERIOD = 11
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_11,
							SUM(
							CASE WHEN LAG_PERIOD = 12
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_12,
							SUM(
							CASE WHEN LAG_PERIOD = 13
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_13,
							SUM(
							CASE WHEN LAG_PERIOD = 14
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_14,
							SUM(
							CASE WHEN LAG_PERIOD = 15
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_15,
							SUM(
							CASE WHEN LAG_PERIOD = 16
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_16,
							SUM(
							CASE WHEN LAG_PERIOD = 17
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_17,
							SUM(
							CASE WHEN LAG_PERIOD = 18
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_18,
							SUM(
							CASE WHEN LAG_PERIOD = 19
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_19,
							SUM(
							CASE WHEN LAG_PERIOD = 20
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_20,
							SUM(
							CASE WHEN LAG_PERIOD = 21
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_21,
							SUM(
							CASE WHEN LAG_PERIOD = 22
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_22,
							SUM(
							CASE WHEN LAG_PERIOD = 23
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_23,
							SUM(
							CASE WHEN LAG_PERIOD = 24
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_24,
							SUM(
							CASE WHEN LAG_PERIOD = 25
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_25,
							SUM(
							CASE WHEN LAG_PERIOD = 26
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_26,
							SUM(
							CASE WHEN LAG_PERIOD = 27
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_27,
							SUM(
							CASE WHEN LAG_PERIOD = 28
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_28,
							SUM(
							CASE WHEN LAG_PERIOD = 29
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_29,
							SUM(
							CASE WHEN LAG_PERIOD = 30
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_30,
							SUM(
							CASE WHEN LAG_PERIOD = 31
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_31,
							SUM(
							CASE WHEN LAG_PERIOD = 32
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_32,
							SUM(
							CASE WHEN LAG_PERIOD = 33
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_33,
							SUM(
							CASE WHEN LAG_PERIOD = 34
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_34,
							SUM(
							CASE WHEN LAG_PERIOD = 35
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_35,
							SUM(
							CASE WHEN LAG_PERIOD = 36
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_36,
							SUM(
							CASE WHEN LAG_PERIOD = 37
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_37,
							SUM(
							CASE WHEN LAG_PERIOD = 38
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_38,
							SUM(
							CASE WHEN LAG_PERIOD = 39
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_39,
							SUM(
							CASE WHEN LAG_PERIOD = 40
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_40,
							SUM(
							CASE WHEN LAG_PERIOD = 41
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_41,
							SUM(
							CASE WHEN LAG_PERIOD = 42
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_42,
							SUM(
							CASE WHEN LAG_PERIOD = 43
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_43,
							SUM(
							CASE WHEN LAG_PERIOD = 44
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_44,
							SUM(
							CASE WHEN LAG_PERIOD = 45
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_45,
							SUM(
							CASE WHEN LAG_PERIOD = 46
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_46,
							SUM(
							CASE WHEN LAG_PERIOD = 47
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_47,
							SUM(
							CASE WHEN LAG_PERIOD = 48
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_48,
							SUM(
							CASE WHEN LAG_PERIOD = 49
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_49,
							SUM(
							CASE WHEN LAG_PERIOD = 50
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_50,
							SUM(
							CASE WHEN LAG_PERIOD = 51
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_51,
							SUM(
							CASE WHEN LAG_PERIOD = 52
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_52,
							SUM(
							CASE WHEN LAG_PERIOD = 53
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_53,
							SUM(
							CASE WHEN LAG_PERIOD = 54
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_54,
							SUM(
							CASE WHEN LAG_PERIOD = 55
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_55,
							SUM(
							CASE WHEN LAG_PERIOD = 56
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_56,
							SUM(
							CASE WHEN LAG_PERIOD = 57
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_57,
							SUM(
							CASE WHEN LAG_PERIOD = 58
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_58,
							SUM(
							CASE WHEN LAG_PERIOD = 59
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_59,
							SUM(
							CASE WHEN LAG_PERIOD = 60
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_60,
							SUM(
							CASE WHEN LAG_PERIOD = 61
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_61,
							SUM(
							CASE WHEN LAG_PERIOD = 62
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_62,
							SUM(
							CASE WHEN LAG_PERIOD = 63
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_63,
							SUM(
							CASE WHEN LAG_PERIOD = 64
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_64,
							SUM(
							CASE WHEN LAG_PERIOD = 65
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_65,
							SUM(
							CASE WHEN LAG_PERIOD = 66
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_66,
							SUM(
							CASE WHEN LAG_PERIOD = 67
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_67,
							SUM(
							CASE WHEN LAG_PERIOD = 68
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_68,
							SUM(
							CASE WHEN LAG_PERIOD = 69
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_69,
							SUM(
							CASE WHEN LAG_PERIOD = 70
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_70,
							SUM(
							CASE WHEN LAG_PERIOD = 71
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_71,
							SUM(
							CASE WHEN LAG_PERIOD = 72
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_72,
							SUM(
							CASE WHEN LAG_PERIOD = 73
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_73,
							SUM(
							CASE WHEN LAG_PERIOD = 74
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_74,
							SUM(
							CASE WHEN LAG_PERIOD = 75
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_75,
							SUM(
							CASE WHEN LAG_PERIOD = 76
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_76,
							SUM(
							CASE WHEN LAG_PERIOD = 77
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_77,
							SUM(
							CASE WHEN LAG_PERIOD = 78
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_78,
							SUM(
							CASE WHEN LAG_PERIOD = 79
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_79,
							SUM(
							CASE WHEN LAG_PERIOD = 80
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_80,
							SUM(
							CASE WHEN LAG_PERIOD = 81
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_81,
							SUM(
							CASE WHEN LAG_PERIOD = 82
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_82,
							SUM(
							CASE WHEN LAG_PERIOD = 83
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_83,
							SUM(
							CASE WHEN LAG_PERIOD = 84
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_84,
							SUM(
							CASE WHEN LAG_PERIOD = 85
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_85,
							SUM(
							CASE WHEN LAG_PERIOD = 86
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_86,
							SUM(
							CASE WHEN LAG_PERIOD = 87
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_87,
							SUM(
							CASE WHEN LAG_PERIOD = 88
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_88,
							SUM(
							CASE WHEN LAG_PERIOD = 89
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_89,
							SUM(
							CASE WHEN LAG_PERIOD = 90
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_90,
							SUM(
							CASE WHEN LAG_PERIOD = 91
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_91,
							SUM(
							CASE WHEN LAG_PERIOD = 92
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_92,
							SUM(
							CASE WHEN LAG_PERIOD = 93
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_93,
							SUM(
							CASE WHEN LAG_PERIOD = 94
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_94,
							SUM(
							CASE WHEN LAG_PERIOD = 95
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_95,
							SUM(
							CASE WHEN LAG_PERIOD = 96
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_96,
							SUM(
							CASE WHEN LAG_PERIOD = 97
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_97,
							SUM(
							CASE WHEN LAG_PERIOD = 98
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_98,
							SUM(
							CASE WHEN LAG_PERIOD = 99
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_99,
							SUM(
							CASE WHEN LAG_PERIOD = 100
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_100,
							SUM(
							CASE WHEN LAG_PERIOD = 101
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_101,
							SUM(
							CASE WHEN LAG_PERIOD = 102
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_102,
							SUM(
							CASE WHEN LAG_PERIOD = 103
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_103,
							SUM(
							CASE WHEN LAG_PERIOD = 104
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_104,
							SUM(
							CASE WHEN LAG_PERIOD = 105
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_105,
							SUM(
							CASE WHEN LAG_PERIOD = 106
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_106,
							SUM(
							CASE WHEN LAG_PERIOD = 107
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_107,
							SUM(
							CASE WHEN LAG_PERIOD = 108
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_108,
							SUM(
							CASE WHEN LAG_PERIOD = 109
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_109,
							SUM(
							CASE WHEN LAG_PERIOD = 110
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_110,
							SUM(
							CASE WHEN LAG_PERIOD = 111
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_111,
							SUM(
							CASE WHEN LAG_PERIOD = 112
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_112,
							SUM(
							CASE WHEN LAG_PERIOD = 113
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_113,
							SUM(
							CASE WHEN LAG_PERIOD = 114
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_114,
							SUM(
							CASE WHEN LAG_PERIOD = 115
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_115,
							SUM(
							CASE WHEN LAG_PERIOD = 116
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_116,
							SUM(
							CASE WHEN LAG_PERIOD = 117
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_117,
							SUM(
							CASE WHEN LAG_PERIOD = 118
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_118,
							SUM(
							CASE WHEN LAG_PERIOD = 119
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_119,
							SUM(
							CASE WHEN LAG_PERIOD = 120
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_120,
							SUM(
							CASE WHEN LAG_PERIOD = 121
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_121,
							SUM(
							CASE WHEN LAG_PERIOD = 122
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_122,
							SUM(
							CASE WHEN LAG_PERIOD = 123
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_123,
							SUM(
							CASE WHEN LAG_PERIOD = 124
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_124,
							SUM(
							CASE WHEN LAG_PERIOD = 125
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_125,
							SUM(
							CASE WHEN LAG_PERIOD = 126
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_126,
							SUM(
							CASE WHEN LAG_PERIOD = 127
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_127,
							SUM(
							CASE WHEN LAG_PERIOD = 128
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_128,
							SUM(
							CASE WHEN LAG_PERIOD = 129
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_129,
							SUM(
							CASE WHEN LAG_PERIOD = 130
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_130,
							SUM(
							CASE WHEN LAG_PERIOD = 131
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_131,
							SUM(
							CASE WHEN LAG_PERIOD = 132
								THEN COST_FLOW_SELECTED_DLR
							END) AS COST_FLOW_SELECTED_DLR_132,
							R12_ACCOUNT
						FROM
							DBO.SY_030_CALC_SUM_STG
						GROUP BY
							REPORT_TYPE,
							R12_ACCOUNT, -- -SS- GL_ACCOUNT
							GL_ACCOUNT_DESCR,
							COUNTRY_INDICATOR,
							START_SHIP_YEAR,
							END_SHIP_YEAR
				) ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'TEMP_030_CS_CF_DLR_PVT was not loaded due to error') ;
		RAISE;
	END P_LOAD_TEMP_030_CS_CF_DLR_PVT;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load temporary table cost flow calculated summary pivot data for CF rate and straight line rate
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_TEMP_030_CS_RATE_PVT
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_TEMP_030_CS_RATE_PVT';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT
				/*+ APPEND */
			INTO
				DBO.TEMP_030_CS_RATE_PVT
				(
					SELECT
							REPORT_TYPE AS REPORT_TYPE,
							NULL AS GL_ACCOUNT, -- -SS-
							GL_ACCOUNT_DESCR,
							COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
							START_SHIP_YEAR,
							END_SHIP_YEAR,
							SUM(
							CASE WHEN LAG_PERIOD = 1
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_1,
							SUM(
							CASE WHEN LAG_PERIOD = 2
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_2,
							SUM(
							CASE WHEN LAG_PERIOD = 3
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_3,
							SUM(
							CASE WHEN LAG_PERIOD = 4
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_4,
							SUM(
							CASE WHEN LAG_PERIOD = 5
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_5,
							SUM(
							CASE WHEN LAG_PERIOD = 6
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_6,
							SUM(
							CASE WHEN LAG_PERIOD = 7
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_7,
							SUM(
							CASE WHEN LAG_PERIOD = 8
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_8,
							SUM(
							CASE WHEN LAG_PERIOD = 9
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_9,
							SUM(
							CASE WHEN LAG_PERIOD = 10
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_10,
							SUM(
							CASE WHEN LAG_PERIOD = 11
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_11,
							SUM(
							CASE WHEN LAG_PERIOD = 12
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_12,
							SUM(
							CASE WHEN LAG_PERIOD = 13
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_13,
							SUM(
							CASE WHEN LAG_PERIOD = 14
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_14,
							SUM(
							CASE WHEN LAG_PERIOD = 15
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_15,
							SUM(
							CASE WHEN LAG_PERIOD = 16
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_16,
							SUM(
							CASE WHEN LAG_PERIOD = 17
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_17,
							SUM(
							CASE WHEN LAG_PERIOD = 18
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_18,
							SUM(
							CASE WHEN LAG_PERIOD = 19
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_19,
							SUM(
							CASE WHEN LAG_PERIOD = 20
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_20,
							SUM(
							CASE WHEN LAG_PERIOD = 21
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_21,
							SUM(
							CASE WHEN LAG_PERIOD = 22
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_22,
							SUM(
							CASE WHEN LAG_PERIOD = 23
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_23,
							SUM(
							CASE WHEN LAG_PERIOD = 24
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_24,
							SUM(
							CASE WHEN LAG_PERIOD = 25
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_25,
							SUM(
							CASE WHEN LAG_PERIOD = 26
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_26,
							SUM(
							CASE WHEN LAG_PERIOD = 27
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_27,
							SUM(
							CASE WHEN LAG_PERIOD = 28
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_28,
							SUM(
							CASE WHEN LAG_PERIOD = 29
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_29,
							SUM(
							CASE WHEN LAG_PERIOD = 30
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_30,
							SUM(
							CASE WHEN LAG_PERIOD = 31
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_31,
							SUM(
							CASE WHEN LAG_PERIOD = 32
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_32,
							SUM(
							CASE WHEN LAG_PERIOD = 33
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_33,
							SUM(
							CASE WHEN LAG_PERIOD = 34
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_34,
							SUM(
							CASE WHEN LAG_PERIOD = 35
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_35,
							SUM(
							CASE WHEN LAG_PERIOD = 36
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_36,
							SUM(
							CASE WHEN LAG_PERIOD = 37
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_37,
							SUM(
							CASE WHEN LAG_PERIOD = 38
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_38,
							SUM(
							CASE WHEN LAG_PERIOD = 39
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_39,
							SUM(
							CASE WHEN LAG_PERIOD = 40
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_40,
							SUM(
							CASE WHEN LAG_PERIOD = 41
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_41,
							SUM(
							CASE WHEN LAG_PERIOD = 42
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_42,
							SUM(
							CASE WHEN LAG_PERIOD = 43
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_43,
							SUM(
							CASE WHEN LAG_PERIOD = 44
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_44,
							SUM(
							CASE WHEN LAG_PERIOD = 45
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_45,
							SUM(
							CASE WHEN LAG_PERIOD = 46
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_46,
							SUM(
							CASE WHEN LAG_PERIOD = 47
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_47,
							SUM(
							CASE WHEN LAG_PERIOD = 48
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_48,
							SUM(
							CASE WHEN LAG_PERIOD = 49
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_49,
							SUM(
							CASE WHEN LAG_PERIOD = 50
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_50,
							SUM(
							CASE WHEN LAG_PERIOD = 51
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_51,
							SUM(
							CASE WHEN LAG_PERIOD = 52
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_52,
							SUM(
							CASE WHEN LAG_PERIOD = 53
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_53,
							SUM(
							CASE WHEN LAG_PERIOD = 54
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_54,
							SUM(
							CASE WHEN LAG_PERIOD = 55
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_55,
							SUM(
							CASE WHEN LAG_PERIOD = 56
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_56,
							SUM(
							CASE WHEN LAG_PERIOD = 57
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_57,
							SUM(
							CASE WHEN LAG_PERIOD = 58
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_58,
							SUM(
							CASE WHEN LAG_PERIOD = 59
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_59,
							SUM(
							CASE WHEN LAG_PERIOD = 60
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_60,
							SUM(
							CASE WHEN LAG_PERIOD = 61
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_61,
							SUM(
							CASE WHEN LAG_PERIOD = 62
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_62,
							SUM(
							CASE WHEN LAG_PERIOD = 63
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_63,
							SUM(
							CASE WHEN LAG_PERIOD = 64
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_64,
							SUM(
							CASE WHEN LAG_PERIOD = 65
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_65,
							SUM(
							CASE WHEN LAG_PERIOD = 66
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_66,
							SUM(
							CASE WHEN LAG_PERIOD = 67
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_67,
							SUM(
							CASE WHEN LAG_PERIOD = 68
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_68,
							SUM(
							CASE WHEN LAG_PERIOD = 69
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_69,
							SUM(
							CASE WHEN LAG_PERIOD = 70
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_70,
							SUM(
							CASE WHEN LAG_PERIOD = 71
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_71,
							SUM(
							CASE WHEN LAG_PERIOD = 72
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_72,
							SUM(
							CASE WHEN LAG_PERIOD = 73
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_73,
							SUM(
							CASE WHEN LAG_PERIOD = 74
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_74,
							SUM(
							CASE WHEN LAG_PERIOD = 75
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_75,
							SUM(
							CASE WHEN LAG_PERIOD = 76
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_76,
							SUM(
							CASE WHEN LAG_PERIOD = 77
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_77,
							SUM(
							CASE WHEN LAG_PERIOD = 78
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_78,
							SUM(
							CASE WHEN LAG_PERIOD = 79
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_79,
							SUM(
							CASE WHEN LAG_PERIOD = 80
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_80,
							SUM(
							CASE WHEN LAG_PERIOD = 81
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_81,
							SUM(
							CASE WHEN LAG_PERIOD = 82
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_82,
							SUM(
							CASE WHEN LAG_PERIOD = 83
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_83,
							SUM(
							CASE WHEN LAG_PERIOD = 84
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_84,
							SUM(
							CASE WHEN LAG_PERIOD = 85
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_85,
							SUM(
							CASE WHEN LAG_PERIOD = 86
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_86,
							SUM(
							CASE WHEN LAG_PERIOD = 87
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_87,
							SUM(
							CASE WHEN LAG_PERIOD = 88
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_88,
							SUM(
							CASE WHEN LAG_PERIOD = 89
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_89,
							SUM(
							CASE WHEN LAG_PERIOD = 90
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_90,
							SUM(
							CASE WHEN LAG_PERIOD = 91
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_91,
							SUM(
							CASE WHEN LAG_PERIOD = 92
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_92,
							SUM(
							CASE WHEN LAG_PERIOD = 93
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_93,
							SUM(
							CASE WHEN LAG_PERIOD = 94
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_94,
							SUM(
							CASE WHEN LAG_PERIOD = 95
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_95,
							SUM(
							CASE WHEN LAG_PERIOD = 96
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_96,
							SUM(
							CASE WHEN LAG_PERIOD = 97
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_97,
							SUM(
							CASE WHEN LAG_PERIOD = 98
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_98,
							SUM(
							CASE WHEN LAG_PERIOD = 99
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_99,
							SUM(
							CASE WHEN LAG_PERIOD = 100
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_100,
							SUM(
							CASE WHEN LAG_PERIOD = 101
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_101,
							SUM(
							CASE WHEN LAG_PERIOD = 102
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_102,
							SUM(
							CASE WHEN LAG_PERIOD = 103
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_103,
							SUM(
							CASE WHEN LAG_PERIOD = 104
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_104,
							SUM(
							CASE WHEN LAG_PERIOD = 105
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_105,
							SUM(
							CASE WHEN LAG_PERIOD = 106
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_106,
							SUM(
							CASE WHEN LAG_PERIOD = 107
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_107,
							SUM(
							CASE WHEN LAG_PERIOD = 108
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_108,
							SUM(
							CASE WHEN LAG_PERIOD = 109
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_109,
							SUM(
							CASE WHEN LAG_PERIOD = 110
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_110,
							SUM(
							CASE WHEN LAG_PERIOD = 111
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_111,
							SUM(
							CASE WHEN LAG_PERIOD = 112
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_112,
							SUM(
							CASE WHEN LAG_PERIOD = 113
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_113,
							SUM(
							CASE WHEN LAG_PERIOD = 114
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_114,
							SUM(
							CASE WHEN LAG_PERIOD = 115
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_115,
							SUM(
							CASE WHEN LAG_PERIOD = 116
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_116,
							SUM(
							CASE WHEN LAG_PERIOD = 117
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_117,
							SUM(
							CASE WHEN LAG_PERIOD = 118
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_118,
							SUM(
							CASE WHEN LAG_PERIOD = 119
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_119,
							SUM(
							CASE WHEN LAG_PERIOD = 120
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_120,
							SUM(
							CASE WHEN LAG_PERIOD = 121
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_121,
							SUM(
							CASE WHEN LAG_PERIOD = 122
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_122,
							SUM(
							CASE WHEN LAG_PERIOD = 123
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_123,
							SUM(
							CASE WHEN LAG_PERIOD = 124
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_124,
							SUM(
							CASE WHEN LAG_PERIOD = 125
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_125,
							SUM(
							CASE WHEN LAG_PERIOD = 126
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_126,
							SUM(
							CASE WHEN LAG_PERIOD = 127
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_127,
							SUM(
							CASE WHEN LAG_PERIOD = 128
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_128,
							SUM(
							CASE WHEN LAG_PERIOD = 129
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_129,
							SUM(
							CASE WHEN LAG_PERIOD = 130
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_130,
							SUM(
							CASE WHEN LAG_PERIOD = 131
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_131,
							SUM(
							CASE WHEN LAG_PERIOD = 132
								THEN COST_FLOW_RATE
							END) AS COST_FLOW_RATE_132,
							SUM(
							CASE WHEN LAG_PERIOD = 1
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_1,
							SUM(
							CASE WHEN LAG_PERIOD = 2
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_2,
							SUM(
							CASE WHEN LAG_PERIOD = 3
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_3,
							SUM(
							CASE WHEN LAG_PERIOD = 4
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_4,
							SUM(
							CASE WHEN LAG_PERIOD = 5
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_5,
							SUM(
							CASE WHEN LAG_PERIOD = 6
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_6,
							SUM(
							CASE WHEN LAG_PERIOD = 7
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_7,
							SUM(
							CASE WHEN LAG_PERIOD = 8
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_8,
							SUM(
							CASE WHEN LAG_PERIOD = 9
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_9,
							SUM(
							CASE WHEN LAG_PERIOD = 10
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_10,
							SUM(
							CASE WHEN LAG_PERIOD = 11
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_11,
							SUM(
							CASE WHEN LAG_PERIOD = 12
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_12,
							SUM(
							CASE WHEN LAG_PERIOD = 13
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_13,
							SUM(
							CASE WHEN LAG_PERIOD = 14
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_14,
							SUM(
							CASE WHEN LAG_PERIOD = 15
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_15,
							SUM(
							CASE WHEN LAG_PERIOD = 16
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_16,
							SUM(
							CASE WHEN LAG_PERIOD = 17
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_17,
							SUM(
							CASE WHEN LAG_PERIOD = 18
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_18,
							SUM(
							CASE WHEN LAG_PERIOD = 19
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_19,
							SUM(
							CASE WHEN LAG_PERIOD = 20
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_20,
							SUM(
							CASE WHEN LAG_PERIOD = 21
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_21,
							SUM(
							CASE WHEN LAG_PERIOD = 22
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_22,
							SUM(
							CASE WHEN LAG_PERIOD = 23
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_23,
							SUM(
							CASE WHEN LAG_PERIOD = 24
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_24,
							SUM(
							CASE WHEN LAG_PERIOD = 25
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_25,
							SUM(
							CASE WHEN LAG_PERIOD = 26
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_26,
							SUM(
							CASE WHEN LAG_PERIOD = 27
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_27,
							SUM(
							CASE WHEN LAG_PERIOD = 28
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_28,
							SUM(
							CASE WHEN LAG_PERIOD = 29
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_29,
							SUM(
							CASE WHEN LAG_PERIOD = 30
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_30,
							SUM(
							CASE WHEN LAG_PERIOD = 31
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_31,
							SUM(
							CASE WHEN LAG_PERIOD = 32
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_32,
							SUM(
							CASE WHEN LAG_PERIOD = 33
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_33,
							SUM(
							CASE WHEN LAG_PERIOD = 34
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_34,
							SUM(
							CASE WHEN LAG_PERIOD = 35
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_35,
							SUM(
							CASE WHEN LAG_PERIOD = 36
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_36,
							SUM(
							CASE WHEN LAG_PERIOD = 37
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_37,
							SUM(
							CASE WHEN LAG_PERIOD = 38
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_38,
							SUM(
							CASE WHEN LAG_PERIOD = 39
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_39,
							SUM(
							CASE WHEN LAG_PERIOD = 40
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_40,
							SUM(
							CASE WHEN LAG_PERIOD = 41
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_41,
							SUM(
							CASE WHEN LAG_PERIOD = 42
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_42,
							SUM(
							CASE WHEN LAG_PERIOD = 43
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_43,
							SUM(
							CASE WHEN LAG_PERIOD = 44
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_44,
							SUM(
							CASE WHEN LAG_PERIOD = 45
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_45,
							SUM(
							CASE WHEN LAG_PERIOD = 46
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_46,
							SUM(
							CASE WHEN LAG_PERIOD = 47
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_47,
							SUM(
							CASE WHEN LAG_PERIOD = 48
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_48,
							SUM(
							CASE WHEN LAG_PERIOD = 49
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_49,
							SUM(
							CASE WHEN LAG_PERIOD = 50
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_50,
							SUM(
							CASE WHEN LAG_PERIOD = 51
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_51,
							SUM(
							CASE WHEN LAG_PERIOD = 52
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_52,
							SUM(
							CASE WHEN LAG_PERIOD = 53
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_53,
							SUM(
							CASE WHEN LAG_PERIOD = 54
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_54,
							SUM(
							CASE WHEN LAG_PERIOD = 55
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_55,
							SUM(
							CASE WHEN LAG_PERIOD = 56
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_56,
							SUM(
							CASE WHEN LAG_PERIOD = 57
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_57,
							SUM(
							CASE WHEN LAG_PERIOD = 58
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_58,
							SUM(
							CASE WHEN LAG_PERIOD = 59
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_59,
							SUM(
							CASE WHEN LAG_PERIOD = 60
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_60,
							SUM(
							CASE WHEN LAG_PERIOD = 61
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_61,
							SUM(
							CASE WHEN LAG_PERIOD = 62
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_62,
							SUM(
							CASE WHEN LAG_PERIOD = 63
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_63,
							SUM(
							CASE WHEN LAG_PERIOD = 64
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_64,
							SUM(
							CASE WHEN LAG_PERIOD = 65
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_65,
							SUM(
							CASE WHEN LAG_PERIOD = 66
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_66,
							SUM(
							CASE WHEN LAG_PERIOD = 67
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_67,
							SUM(
							CASE WHEN LAG_PERIOD = 68
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_68,
							SUM(
							CASE WHEN LAG_PERIOD = 69
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_69,
							SUM(
							CASE WHEN LAG_PERIOD = 70
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_70,
							SUM(
							CASE WHEN LAG_PERIOD = 71
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_71,
							SUM(
							CASE WHEN LAG_PERIOD = 72
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_72,
							SUM(
							CASE WHEN LAG_PERIOD = 73
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_73,
							SUM(
							CASE WHEN LAG_PERIOD = 74
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_74,
							SUM(
							CASE WHEN LAG_PERIOD = 75
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_75,
							SUM(
							CASE WHEN LAG_PERIOD = 76
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_76,
							SUM(
							CASE WHEN LAG_PERIOD = 77
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_77,
							SUM(
							CASE WHEN LAG_PERIOD = 78
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_78,
							SUM(
							CASE WHEN LAG_PERIOD = 79
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_79,
							SUM(
							CASE WHEN LAG_PERIOD = 80
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_80,
							SUM(
							CASE WHEN LAG_PERIOD = 81
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_81,
							SUM(
							CASE WHEN LAG_PERIOD = 82
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_82,
							SUM(
							CASE WHEN LAG_PERIOD = 83
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_83,
							SUM(
							CASE WHEN LAG_PERIOD = 84
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_84,
							SUM(
							CASE WHEN LAG_PERIOD = 85
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_85,
							SUM(
							CASE WHEN LAG_PERIOD = 86
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_86,
							SUM(
							CASE WHEN LAG_PERIOD = 87
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_87,
							SUM(
							CASE WHEN LAG_PERIOD = 88
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_88,
							SUM(
							CASE WHEN LAG_PERIOD = 89
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_89,
							SUM(
							CASE WHEN LAG_PERIOD = 90
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_90,
							SUM(
							CASE WHEN LAG_PERIOD = 91
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_91,
							SUM(
							CASE WHEN LAG_PERIOD = 92
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_92,
							SUM(
							CASE WHEN LAG_PERIOD = 93
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_93,
							SUM(
							CASE WHEN LAG_PERIOD = 94
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_94,
							SUM(
							CASE WHEN LAG_PERIOD = 95
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_95,
							SUM(
							CASE WHEN LAG_PERIOD = 96
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_96,
							SUM(
							CASE WHEN LAG_PERIOD = 97
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_97,
							SUM(
							CASE WHEN LAG_PERIOD = 98
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_98,
							SUM(
							CASE WHEN LAG_PERIOD = 99
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_99,
							SUM(
							CASE WHEN LAG_PERIOD = 100
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_100,
							SUM(
							CASE WHEN LAG_PERIOD = 101
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_101,
							SUM(
							CASE WHEN LAG_PERIOD = 102
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_102,
							SUM(
							CASE WHEN LAG_PERIOD = 103
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_103,
							SUM(
							CASE WHEN LAG_PERIOD = 104
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_104,
							SUM(
							CASE WHEN LAG_PERIOD = 105
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_105,
							SUM(
							CASE WHEN LAG_PERIOD = 106
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_106,
							SUM(
							CASE WHEN LAG_PERIOD = 107
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_107,
							SUM(
							CASE WHEN LAG_PERIOD = 108
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_108,
							SUM(
							CASE WHEN LAG_PERIOD = 109
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_109,
							SUM(
							CASE WHEN LAG_PERIOD = 110
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_110,
							SUM(
							CASE WHEN LAG_PERIOD = 111
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_111,
							SUM(
							CASE WHEN LAG_PERIOD = 112
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_112,
							SUM(
							CASE WHEN LAG_PERIOD = 113
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_113,
							SUM(
							CASE WHEN LAG_PERIOD = 114
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_114,
							SUM(
							CASE WHEN LAG_PERIOD = 115
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_115,
							SUM(
							CASE WHEN LAG_PERIOD = 116
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_116,
							SUM(
							CASE WHEN LAG_PERIOD = 117
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_117,
							SUM(
							CASE WHEN LAG_PERIOD = 118
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_118,
							SUM(
							CASE WHEN LAG_PERIOD = 119
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_119,
							SUM(
							CASE WHEN LAG_PERIOD = 120
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_120,
							SUM(
							CASE WHEN LAG_PERIOD = 121
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_121,
							SUM(
							CASE WHEN LAG_PERIOD = 122
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_122,
							SUM(
							CASE WHEN LAG_PERIOD = 123
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_123,
							SUM(
							CASE WHEN LAG_PERIOD = 124
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_124,
							SUM(
							CASE WHEN LAG_PERIOD = 125
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_125,
							SUM(
							CASE WHEN LAG_PERIOD = 126
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_126,
							SUM(
							CASE WHEN LAG_PERIOD = 127
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_127,
							SUM(
							CASE WHEN LAG_PERIOD = 128
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_128,
							SUM(
							CASE WHEN LAG_PERIOD = 129
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_129,
							SUM(
							CASE WHEN LAG_PERIOD = 130
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_130,
							SUM(
							CASE WHEN LAG_PERIOD = 131
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_131,
							SUM(
							CASE WHEN LAG_PERIOD = 132
								THEN STRAIGHT_LINE_RATE
							END) AS STRAIGHT_LINE_RATE_132,
							R12_ACCOUNT
						FROM
							DBO.SY_030_CALC_SUM_STG
						GROUP BY
							REPORT_TYPE,
							R12_ACCOUNT, -- -SS- GL_ACCOUNT
							GL_ACCOUNT_DESCR,
							COUNTRY_INDICATOR,
							START_SHIP_YEAR,
							END_SHIP_YEAR
				) ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'TEMP_030_CS_RATE_PVT was not loaded due to error') ;
		RAISE;
	END P_LOAD_TEMP_030_CS_RATE_PVT;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load cost flow calculated summary pivot data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_SUMMARY_CF_PIVOT
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_SUMMARY_CF_PIVOT';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.DM_030_CALC_SUM_PIVOT
		SELECT
				TCDP.REPORT_TYPE,
				TCDP.R12_ACCOUNT, -- -SS- GL_ACCOUNT
				TCDP.GL_ACCOUNT_DESCR,
				TCDP.COUNTRY_INDICATOR,
				TCDP.START_SHIP_YEAR,
				TCDP.END_SHIP_YEAR,
				TCDP.CALC_FACTOR_1,
				TCDP.CALC_FACTOR_2,
				TCDP.CALC_FACTOR_3,
				TCDP.CALC_FACTOR_4,
				TCDP.CALC_FACTOR_5,
				TCDP.CALC_FACTOR_6,
				TCDP.CALC_FACTOR_7,
				TCDP.CALC_FACTOR_8,
				TCDP.CALC_FACTOR_9,
				TCDP.CALC_FACTOR_10,
				TCDP.CALC_FACTOR_11,
				TCDP.CALC_FACTOR_12,
				TCDP.CALC_FACTOR_13,
				TCDP.CALC_FACTOR_14,
				TCDP.CALC_FACTOR_15,
				TCDP.CALC_FACTOR_16,
				TCDP.CALC_FACTOR_17,
				TCDP.CALC_FACTOR_18,
				TCDP.CALC_FACTOR_19,
				TCDP.CALC_FACTOR_20,
				TCDP.CALC_FACTOR_21,
				TCDP.CALC_FACTOR_22,
				TCDP.CALC_FACTOR_23,
				TCDP.CALC_FACTOR_24,
				TCDP.CALC_FACTOR_25,
				TCDP.CALC_FACTOR_26,
				TCDP.CALC_FACTOR_27,
				TCDP.CALC_FACTOR_28,
				TCDP.CALC_FACTOR_29,
				TCDP.CALC_FACTOR_30,
				TCDP.CALC_FACTOR_31,
				TCDP.CALC_FACTOR_32,
				TCDP.CALC_FACTOR_33,
				TCDP.CALC_FACTOR_34,
				TCDP.CALC_FACTOR_35,
				TCDP.CALC_FACTOR_36,
				TCDP.CALC_FACTOR_37,
				TCDP.CALC_FACTOR_38,
				TCDP.CALC_FACTOR_39,
				TCDP.CALC_FACTOR_40,
				TCDP.CALC_FACTOR_41,
				TCDP.CALC_FACTOR_42,
				TCDP.CALC_FACTOR_43,
				TCDP.CALC_FACTOR_44,
				TCDP.CALC_FACTOR_45,
				TCDP.CALC_FACTOR_46,
				TCDP.CALC_FACTOR_47,
				TCDP.CALC_FACTOR_48,
				TCDP.CALC_FACTOR_49,
				TCDP.CALC_FACTOR_50,
				TCDP.CALC_FACTOR_51,
				TCDP.CALC_FACTOR_52,
				TCDP.CALC_FACTOR_53,
				TCDP.CALC_FACTOR_54,
				TCDP.CALC_FACTOR_55,
				TCDP.CALC_FACTOR_56,
				TCDP.CALC_FACTOR_57,
				TCDP.CALC_FACTOR_58,
				TCDP.CALC_FACTOR_59,
				TCDP.CALC_FACTOR_60,
				TCDP.CALC_FACTOR_61,
				TCDP.CALC_FACTOR_62,
				TCDP.CALC_FACTOR_63,
				TCDP.CALC_FACTOR_64,
				TCDP.CALC_FACTOR_65,
				TCDP.CALC_FACTOR_66,
				TCDP.CALC_FACTOR_67,
				TCDP.CALC_FACTOR_68,
				TCDP.CALC_FACTOR_69,
				TCDP.CALC_FACTOR_70,
				TCDP.CALC_FACTOR_71,
				TCDP.CALC_FACTOR_72,
				TCDP.CALC_FACTOR_73,
				TCDP.CALC_FACTOR_74,
				TCDP.CALC_FACTOR_75,
				TCDP.CALC_FACTOR_76,
				TCDP.CALC_FACTOR_77,
				TCDP.CALC_FACTOR_78,
				TCDP.CALC_FACTOR_79,
				TCDP.CALC_FACTOR_80,
				TCDP.CALC_FACTOR_81,
				TCDP.CALC_FACTOR_82,
				TCDP.CALC_FACTOR_83,
				TCDP.CALC_FACTOR_84,
				TCDP.CALC_FACTOR_85,
				TCDP.CALC_FACTOR_86,
				TCDP.CALC_FACTOR_87,
				TCDP.CALC_FACTOR_88,
				TCDP.CALC_FACTOR_89,
				TCDP.CALC_FACTOR_90,
				TCDP.CALC_FACTOR_91,
				TCDP.CALC_FACTOR_92,
				TCDP.CALC_FACTOR_93,
				TCDP.CALC_FACTOR_94,
				TCDP.CALC_FACTOR_95,
				TCDP.CALC_FACTOR_96,
				TCDP.CALC_FACTOR_97,
				TCDP.CALC_FACTOR_98,
				TCDP.CALC_FACTOR_99,
				TCDP.CALC_FACTOR_100,
				TCDP.CALC_FACTOR_101,
				TCDP.CALC_FACTOR_102,
				TCDP.CALC_FACTOR_103,
				TCDP.CALC_FACTOR_104,
				TCDP.CALC_FACTOR_105,
				TCDP.CALC_FACTOR_106,
				TCDP.CALC_FACTOR_107,
				TCDP.CALC_FACTOR_108,
				TCDP.CALC_FACTOR_109,
				TCDP.CALC_FACTOR_110,
				TCDP.CALC_FACTOR_111,
				TCDP.CALC_FACTOR_112,
				TCDP.CALC_FACTOR_113,
				TCDP.CALC_FACTOR_114,
				TCDP.CALC_FACTOR_115,
				TCDP.CALC_FACTOR_116,
				TCDP.CALC_FACTOR_117,
				TCDP.CALC_FACTOR_118,
				TCDP.CALC_FACTOR_119,
				TCDP.CALC_FACTOR_120,
				TCDP.CALC_FACTOR_121,
				TCDP.CALC_FACTOR_122,
				TCDP.CALC_FACTOR_123,
				TCDP.CALC_FACTOR_124,
				TCDP.CALC_FACTOR_125,
				TCDP.CALC_FACTOR_126,
				TCDP.CALC_FACTOR_127,
				TCDP.CALC_FACTOR_128,
				TCDP.CALC_FACTOR_129,
				TCDP.CALC_FACTOR_130,
				TCDP.CALC_FACTOR_131,
				TCDP.CALC_FACTOR_132,
				TCDP.COST_FLOW_SELECTED_DLR_1,
				TCDP.COST_FLOW_SELECTED_DLR_2,
				TCDP.COST_FLOW_SELECTED_DLR_3,
				TCDP.COST_FLOW_SELECTED_DLR_4,
				TCDP.COST_FLOW_SELECTED_DLR_5,
				TCDP.COST_FLOW_SELECTED_DLR_6,
				TCDP.COST_FLOW_SELECTED_DLR_7,
				TCDP.COST_FLOW_SELECTED_DLR_8,
				TCDP.COST_FLOW_SELECTED_DLR_9,
				TCDP.COST_FLOW_SELECTED_DLR_10,
				TCDP.COST_FLOW_SELECTED_DLR_11,
				TCDP.COST_FLOW_SELECTED_DLR_12,
				TCDP.COST_FLOW_SELECTED_DLR_13,
				TCDP.COST_FLOW_SELECTED_DLR_14,
				TCDP.COST_FLOW_SELECTED_DLR_15,
				TCDP.COST_FLOW_SELECTED_DLR_16,
				TCDP.COST_FLOW_SELECTED_DLR_17,
				TCDP.COST_FLOW_SELECTED_DLR_18,
				TCDP.COST_FLOW_SELECTED_DLR_19,
				TCDP.COST_FLOW_SELECTED_DLR_20,
				TCDP.COST_FLOW_SELECTED_DLR_21,
				TCDP.COST_FLOW_SELECTED_DLR_22,
				TCDP.COST_FLOW_SELECTED_DLR_23,
				TCDP.COST_FLOW_SELECTED_DLR_24,
				TCDP.COST_FLOW_SELECTED_DLR_25,
				TCDP.COST_FLOW_SELECTED_DLR_26,
				TCDP.COST_FLOW_SELECTED_DLR_27,
				TCDP.COST_FLOW_SELECTED_DLR_28,
				TCDP.COST_FLOW_SELECTED_DLR_29,
				TCDP.COST_FLOW_SELECTED_DLR_30,
				TCDP.COST_FLOW_SELECTED_DLR_31,
				TCDP.COST_FLOW_SELECTED_DLR_32,
				TCDP.COST_FLOW_SELECTED_DLR_33,
				TCDP.COST_FLOW_SELECTED_DLR_34,
				TCDP.COST_FLOW_SELECTED_DLR_35,
				TCDP.COST_FLOW_SELECTED_DLR_36,
				TCDP.COST_FLOW_SELECTED_DLR_37,
				TCDP.COST_FLOW_SELECTED_DLR_38,
				TCDP.COST_FLOW_SELECTED_DLR_39,
				TCDP.COST_FLOW_SELECTED_DLR_40,
				TCDP.COST_FLOW_SELECTED_DLR_41,
				TCDP.COST_FLOW_SELECTED_DLR_42,
				TCDP.COST_FLOW_SELECTED_DLR_43,
				TCDP.COST_FLOW_SELECTED_DLR_44,
				TCDP.COST_FLOW_SELECTED_DLR_45,
				TCDP.COST_FLOW_SELECTED_DLR_46,
				TCDP.COST_FLOW_SELECTED_DLR_47,
				TCDP.COST_FLOW_SELECTED_DLR_48,
				TCDP.COST_FLOW_SELECTED_DLR_49,
				TCDP.COST_FLOW_SELECTED_DLR_50,
				TCDP.COST_FLOW_SELECTED_DLR_51,
				TCDP.COST_FLOW_SELECTED_DLR_52,
				TCDP.COST_FLOW_SELECTED_DLR_53,
				TCDP.COST_FLOW_SELECTED_DLR_54,
				TCDP.COST_FLOW_SELECTED_DLR_55,
				TCDP.COST_FLOW_SELECTED_DLR_56,
				TCDP.COST_FLOW_SELECTED_DLR_57,
				TCDP.COST_FLOW_SELECTED_DLR_58,
				TCDP.COST_FLOW_SELECTED_DLR_59,
				TCDP.COST_FLOW_SELECTED_DLR_60,
				TCDP.COST_FLOW_SELECTED_DLR_61,
				TCDP.COST_FLOW_SELECTED_DLR_62,
				TCDP.COST_FLOW_SELECTED_DLR_63,
				TCDP.COST_FLOW_SELECTED_DLR_64,
				TCDP.COST_FLOW_SELECTED_DLR_65,
				TCDP.COST_FLOW_SELECTED_DLR_66,
				TCDP.COST_FLOW_SELECTED_DLR_67,
				TCDP.COST_FLOW_SELECTED_DLR_68,
				TCDP.COST_FLOW_SELECTED_DLR_69,
				TCDP.COST_FLOW_SELECTED_DLR_70,
				TCDP.COST_FLOW_SELECTED_DLR_71,
				TCDP.COST_FLOW_SELECTED_DLR_72,
				TCDP.COST_FLOW_SELECTED_DLR_73,
				TCDP.COST_FLOW_SELECTED_DLR_74,
				TCDP.COST_FLOW_SELECTED_DLR_75,
				TCDP.COST_FLOW_SELECTED_DLR_76,
				TCDP.COST_FLOW_SELECTED_DLR_77,
				TCDP.COST_FLOW_SELECTED_DLR_78,
				TCDP.COST_FLOW_SELECTED_DLR_79,
				TCDP.COST_FLOW_SELECTED_DLR_80,
				TCDP.COST_FLOW_SELECTED_DLR_81,
				TCDP.COST_FLOW_SELECTED_DLR_82,
				TCDP.COST_FLOW_SELECTED_DLR_83,
				TCDP.COST_FLOW_SELECTED_DLR_84,
				TCDP.COST_FLOW_SELECTED_DLR_85,
				TCDP.COST_FLOW_SELECTED_DLR_86,
				TCDP.COST_FLOW_SELECTED_DLR_87,
				TCDP.COST_FLOW_SELECTED_DLR_88,
				TCDP.COST_FLOW_SELECTED_DLR_89,
				TCDP.COST_FLOW_SELECTED_DLR_90,
				TCDP.COST_FLOW_SELECTED_DLR_91,
				TCDP.COST_FLOW_SELECTED_DLR_92,
				TCDP.COST_FLOW_SELECTED_DLR_93,
				TCDP.COST_FLOW_SELECTED_DLR_94,
				TCDP.COST_FLOW_SELECTED_DLR_95,
				TCDP.COST_FLOW_SELECTED_DLR_96,
				TCDP.COST_FLOW_SELECTED_DLR_97,
				TCDP.COST_FLOW_SELECTED_DLR_98,
				TCDP.COST_FLOW_SELECTED_DLR_99,
				TCDP.COST_FLOW_SELECTED_DLR_100,
				TCDP.COST_FLOW_SELECTED_DLR_101,
				TCDP.COST_FLOW_SELECTED_DLR_102,
				TCDP.COST_FLOW_SELECTED_DLR_103,
				TCDP.COST_FLOW_SELECTED_DLR_104,
				TCDP.COST_FLOW_SELECTED_DLR_105,
				TCDP.COST_FLOW_SELECTED_DLR_106,
				TCDP.COST_FLOW_SELECTED_DLR_107,
				TCDP.COST_FLOW_SELECTED_DLR_108,
				TCDP.COST_FLOW_SELECTED_DLR_109,
				TCDP.COST_FLOW_SELECTED_DLR_110,
				TCDP.COST_FLOW_SELECTED_DLR_111,
				TCDP.COST_FLOW_SELECTED_DLR_112,
				TCDP.COST_FLOW_SELECTED_DLR_113,
				TCDP.COST_FLOW_SELECTED_DLR_114,
				TCDP.COST_FLOW_SELECTED_DLR_115,
				TCDP.COST_FLOW_SELECTED_DLR_116,
				TCDP.COST_FLOW_SELECTED_DLR_117,
				TCDP.COST_FLOW_SELECTED_DLR_118,
				TCDP.COST_FLOW_SELECTED_DLR_119,
				TCDP.COST_FLOW_SELECTED_DLR_120,
				TCDP.COST_FLOW_SELECTED_DLR_121,
				TCDP.COST_FLOW_SELECTED_DLR_122,
				TCDP.COST_FLOW_SELECTED_DLR_123,
				TCDP.COST_FLOW_SELECTED_DLR_124,
				TCDP.COST_FLOW_SELECTED_DLR_125,
				TCDP.COST_FLOW_SELECTED_DLR_126,
				TCDP.COST_FLOW_SELECTED_DLR_127,
				TCDP.COST_FLOW_SELECTED_DLR_128,
				TCDP.COST_FLOW_SELECTED_DLR_129,
				TCDP.COST_FLOW_SELECTED_DLR_130,
				TCDP.COST_FLOW_SELECTED_DLR_131,
				TCDP.COST_FLOW_SELECTED_DLR_132,
				TCRP.COST_FLOW_RATE_1,
				TCRP.COST_FLOW_RATE_2,
				TCRP.COST_FLOW_RATE_3,
				TCRP.COST_FLOW_RATE_4,
				TCRP.COST_FLOW_RATE_5,
				TCRP.COST_FLOW_RATE_6,
				TCRP.COST_FLOW_RATE_7,
				TCRP.COST_FLOW_RATE_8,
				TCRP.COST_FLOW_RATE_9,
				TCRP.COST_FLOW_RATE_10,
				TCRP.COST_FLOW_RATE_11,
				TCRP.COST_FLOW_RATE_12,
				TCRP.COST_FLOW_RATE_13,
				TCRP.COST_FLOW_RATE_14,
				TCRP.COST_FLOW_RATE_15,
				TCRP.COST_FLOW_RATE_16,
				TCRP.COST_FLOW_RATE_17,
				TCRP.COST_FLOW_RATE_18,
				TCRP.COST_FLOW_RATE_19,
				TCRP.COST_FLOW_RATE_20,
				TCRP.COST_FLOW_RATE_21,
				TCRP.COST_FLOW_RATE_22,
				TCRP.COST_FLOW_RATE_23,
				TCRP.COST_FLOW_RATE_24,
				TCRP.COST_FLOW_RATE_25,
				TCRP.COST_FLOW_RATE_26,
				TCRP.COST_FLOW_RATE_27,
				TCRP.COST_FLOW_RATE_28,
				TCRP.COST_FLOW_RATE_29,
				TCRP.COST_FLOW_RATE_30,
				TCRP.COST_FLOW_RATE_31,
				TCRP.COST_FLOW_RATE_32,
				TCRP.COST_FLOW_RATE_33,
				TCRP.COST_FLOW_RATE_34,
				TCRP.COST_FLOW_RATE_35,
				TCRP.COST_FLOW_RATE_36,
				TCRP.COST_FLOW_RATE_37,
				TCRP.COST_FLOW_RATE_38,
				TCRP.COST_FLOW_RATE_39,
				TCRP.COST_FLOW_RATE_40,
				TCRP.COST_FLOW_RATE_41,
				TCRP.COST_FLOW_RATE_42,
				TCRP.COST_FLOW_RATE_43,
				TCRP.COST_FLOW_RATE_44,
				TCRP.COST_FLOW_RATE_45,
				TCRP.COST_FLOW_RATE_46,
				TCRP.COST_FLOW_RATE_47,
				TCRP.COST_FLOW_RATE_48,
				TCRP.COST_FLOW_RATE_49,
				TCRP.COST_FLOW_RATE_50,
				TCRP.COST_FLOW_RATE_51,
				TCRP.COST_FLOW_RATE_52,
				TCRP.COST_FLOW_RATE_53,
				TCRP.COST_FLOW_RATE_54,
				TCRP.COST_FLOW_RATE_55,
				TCRP.COST_FLOW_RATE_56,
				TCRP.COST_FLOW_RATE_57,
				TCRP.COST_FLOW_RATE_58,
				TCRP.COST_FLOW_RATE_59,
				TCRP.COST_FLOW_RATE_60,
				TCRP.COST_FLOW_RATE_61,
				TCRP.COST_FLOW_RATE_62,
				TCRP.COST_FLOW_RATE_63,
				TCRP.COST_FLOW_RATE_64,
				TCRP.COST_FLOW_RATE_65,
				TCRP.COST_FLOW_RATE_66,
				TCRP.COST_FLOW_RATE_67,
				TCRP.COST_FLOW_RATE_68,
				TCRP.COST_FLOW_RATE_69,
				TCRP.COST_FLOW_RATE_70,
				TCRP.COST_FLOW_RATE_71,
				TCRP.COST_FLOW_RATE_72,
				TCRP.COST_FLOW_RATE_73,
				TCRP.COST_FLOW_RATE_74,
				TCRP.COST_FLOW_RATE_75,
				TCRP.COST_FLOW_RATE_76,
				TCRP.COST_FLOW_RATE_77,
				TCRP.COST_FLOW_RATE_78,
				TCRP.COST_FLOW_RATE_79,
				TCRP.COST_FLOW_RATE_80,
				TCRP.COST_FLOW_RATE_81,
				TCRP.COST_FLOW_RATE_82,
				TCRP.COST_FLOW_RATE_83,
				TCRP.COST_FLOW_RATE_84,
				TCRP.COST_FLOW_RATE_85,
				TCRP.COST_FLOW_RATE_86,
				TCRP.COST_FLOW_RATE_87,
				TCRP.COST_FLOW_RATE_88,
				TCRP.COST_FLOW_RATE_89,
				TCRP.COST_FLOW_RATE_90,
				TCRP.COST_FLOW_RATE_91,
				TCRP.COST_FLOW_RATE_92,
				TCRP.COST_FLOW_RATE_93,
				TCRP.COST_FLOW_RATE_94,
				TCRP.COST_FLOW_RATE_95,
				TCRP.COST_FLOW_RATE_96,
				TCRP.COST_FLOW_RATE_97,
				TCRP.COST_FLOW_RATE_98,
				TCRP.COST_FLOW_RATE_99,
				TCRP.COST_FLOW_RATE_100,
				TCRP.COST_FLOW_RATE_101,
				TCRP.COST_FLOW_RATE_102,
				TCRP.COST_FLOW_RATE_103,
				TCRP.COST_FLOW_RATE_104,
				TCRP.COST_FLOW_RATE_105,
				TCRP.COST_FLOW_RATE_106,
				TCRP.COST_FLOW_RATE_107,
				TCRP.COST_FLOW_RATE_108,
				TCRP.COST_FLOW_RATE_109,
				TCRP.COST_FLOW_RATE_110,
				TCRP.COST_FLOW_RATE_111,
				TCRP.COST_FLOW_RATE_112,
				TCRP.COST_FLOW_RATE_113,
				TCRP.COST_FLOW_RATE_114,
				TCRP.COST_FLOW_RATE_115,
				TCRP.COST_FLOW_RATE_116,
				TCRP.COST_FLOW_RATE_117,
				TCRP.COST_FLOW_RATE_118,
				TCRP.COST_FLOW_RATE_119,
				TCRP.COST_FLOW_RATE_120,
				TCRP.COST_FLOW_RATE_121,
				TCRP.COST_FLOW_RATE_122,
				TCRP.COST_FLOW_RATE_123,
				TCRP.COST_FLOW_RATE_124,
				TCRP.COST_FLOW_RATE_125,
				TCRP.COST_FLOW_RATE_126,
				TCRP.COST_FLOW_RATE_127,
				TCRP.COST_FLOW_RATE_128,
				TCRP.COST_FLOW_RATE_129,
				TCRP.COST_FLOW_RATE_130,
				TCRP.COST_FLOW_RATE_131,
				TCRP.COST_FLOW_RATE_132,
				TCRP.STRAIGHT_LINE_RATE_1,
				TCRP.STRAIGHT_LINE_RATE_2,
				TCRP.STRAIGHT_LINE_RATE_3,
				TCRP.STRAIGHT_LINE_RATE_4,
				TCRP.STRAIGHT_LINE_RATE_5,
				TCRP.STRAIGHT_LINE_RATE_6,
				TCRP.STRAIGHT_LINE_RATE_7,
				TCRP.STRAIGHT_LINE_RATE_8,
				TCRP.STRAIGHT_LINE_RATE_9,
				TCRP.STRAIGHT_LINE_RATE_10,
				TCRP.STRAIGHT_LINE_RATE_11,
				TCRP.STRAIGHT_LINE_RATE_12,
				TCRP.STRAIGHT_LINE_RATE_13,
				TCRP.STRAIGHT_LINE_RATE_14,
				TCRP.STRAIGHT_LINE_RATE_15,
				TCRP.STRAIGHT_LINE_RATE_16,
				TCRP.STRAIGHT_LINE_RATE_17,
				TCRP.STRAIGHT_LINE_RATE_18,
				TCRP.STRAIGHT_LINE_RATE_19,
				TCRP.STRAIGHT_LINE_RATE_20,
				TCRP.STRAIGHT_LINE_RATE_21,
				TCRP.STRAIGHT_LINE_RATE_22,
				TCRP.STRAIGHT_LINE_RATE_23,
				TCRP.STRAIGHT_LINE_RATE_24,
				TCRP.STRAIGHT_LINE_RATE_25,
				TCRP.STRAIGHT_LINE_RATE_26,
				TCRP.STRAIGHT_LINE_RATE_27,
				TCRP.STRAIGHT_LINE_RATE_28,
				TCRP.STRAIGHT_LINE_RATE_29,
				TCRP.STRAIGHT_LINE_RATE_30,
				TCRP.STRAIGHT_LINE_RATE_31,
				TCRP.STRAIGHT_LINE_RATE_32,
				TCRP.STRAIGHT_LINE_RATE_33,
				TCRP.STRAIGHT_LINE_RATE_34,
				TCRP.STRAIGHT_LINE_RATE_35,
				TCRP.STRAIGHT_LINE_RATE_36,
				TCRP.STRAIGHT_LINE_RATE_37,
				TCRP.STRAIGHT_LINE_RATE_38,
				TCRP.STRAIGHT_LINE_RATE_39,
				TCRP.STRAIGHT_LINE_RATE_40,
				TCRP.STRAIGHT_LINE_RATE_41,
				TCRP.STRAIGHT_LINE_RATE_42,
				TCRP.STRAIGHT_LINE_RATE_43,
				TCRP.STRAIGHT_LINE_RATE_44,
				TCRP.STRAIGHT_LINE_RATE_45,
				TCRP.STRAIGHT_LINE_RATE_46,
				TCRP.STRAIGHT_LINE_RATE_47,
				TCRP.STRAIGHT_LINE_RATE_48,
				TCRP.STRAIGHT_LINE_RATE_49,
				TCRP.STRAIGHT_LINE_RATE_50,
				TCRP.STRAIGHT_LINE_RATE_51,
				TCRP.STRAIGHT_LINE_RATE_52,
				TCRP.STRAIGHT_LINE_RATE_53,
				TCRP.STRAIGHT_LINE_RATE_54,
				TCRP.STRAIGHT_LINE_RATE_55,
				TCRP.STRAIGHT_LINE_RATE_56,
				TCRP.STRAIGHT_LINE_RATE_57,
				TCRP.STRAIGHT_LINE_RATE_58,
				TCRP.STRAIGHT_LINE_RATE_59,
				TCRP.STRAIGHT_LINE_RATE_60,
				TCRP.STRAIGHT_LINE_RATE_61,
				TCRP.STRAIGHT_LINE_RATE_62,
				TCRP.STRAIGHT_LINE_RATE_63,
				TCRP.STRAIGHT_LINE_RATE_64,
				TCRP.STRAIGHT_LINE_RATE_65,
				TCRP.STRAIGHT_LINE_RATE_66,
				TCRP.STRAIGHT_LINE_RATE_67,
				TCRP.STRAIGHT_LINE_RATE_68,
				TCRP.STRAIGHT_LINE_RATE_69,
				TCRP.STRAIGHT_LINE_RATE_70,
				TCRP.STRAIGHT_LINE_RATE_71,
				TCRP.STRAIGHT_LINE_RATE_72,
				TCRP.STRAIGHT_LINE_RATE_73,
				TCRP.STRAIGHT_LINE_RATE_74,
				TCRP.STRAIGHT_LINE_RATE_75,
				TCRP.STRAIGHT_LINE_RATE_76,
				TCRP.STRAIGHT_LINE_RATE_77,
				TCRP.STRAIGHT_LINE_RATE_78,
				TCRP.STRAIGHT_LINE_RATE_79,
				TCRP.STRAIGHT_LINE_RATE_80,
				TCRP.STRAIGHT_LINE_RATE_81,
				TCRP.STRAIGHT_LINE_RATE_82,
				TCRP.STRAIGHT_LINE_RATE_83,
				TCRP.STRAIGHT_LINE_RATE_84,
				TCRP.STRAIGHT_LINE_RATE_85,
				TCRP.STRAIGHT_LINE_RATE_86,
				TCRP.STRAIGHT_LINE_RATE_87,
				TCRP.STRAIGHT_LINE_RATE_88,
				TCRP.STRAIGHT_LINE_RATE_89,
				TCRP.STRAIGHT_LINE_RATE_90,
				TCRP.STRAIGHT_LINE_RATE_91,
				TCRP.STRAIGHT_LINE_RATE_92,
				TCRP.STRAIGHT_LINE_RATE_93,
				TCRP.STRAIGHT_LINE_RATE_94,
				TCRP.STRAIGHT_LINE_RATE_95,
				TCRP.STRAIGHT_LINE_RATE_96,
				TCRP.STRAIGHT_LINE_RATE_97,
				TCRP.STRAIGHT_LINE_RATE_98,
				TCRP.STRAIGHT_LINE_RATE_99,
				TCRP.STRAIGHT_LINE_RATE_100,
				TCRP.STRAIGHT_LINE_RATE_101,
				TCRP.STRAIGHT_LINE_RATE_102,
				TCRP.STRAIGHT_LINE_RATE_103,
				TCRP.STRAIGHT_LINE_RATE_104,
				TCRP.STRAIGHT_LINE_RATE_105,
				TCRP.STRAIGHT_LINE_RATE_106,
				TCRP.STRAIGHT_LINE_RATE_107,
				TCRP.STRAIGHT_LINE_RATE_108,
				TCRP.STRAIGHT_LINE_RATE_109,
				TCRP.STRAIGHT_LINE_RATE_110,
				TCRP.STRAIGHT_LINE_RATE_111,
				TCRP.STRAIGHT_LINE_RATE_112,
				TCRP.STRAIGHT_LINE_RATE_113,
				TCRP.STRAIGHT_LINE_RATE_114,
				TCRP.STRAIGHT_LINE_RATE_115,
				TCRP.STRAIGHT_LINE_RATE_116,
				TCRP.STRAIGHT_LINE_RATE_117,
				TCRP.STRAIGHT_LINE_RATE_118,
				TCRP.STRAIGHT_LINE_RATE_119,
				TCRP.STRAIGHT_LINE_RATE_120,
				TCRP.STRAIGHT_LINE_RATE_121,
				TCRP.STRAIGHT_LINE_RATE_122,
				TCRP.STRAIGHT_LINE_RATE_123,
				TCRP.STRAIGHT_LINE_RATE_124,
				TCRP.STRAIGHT_LINE_RATE_125,
				TCRP.STRAIGHT_LINE_RATE_126,
				TCRP.STRAIGHT_LINE_RATE_127,
				TCRP.STRAIGHT_LINE_RATE_128,
				TCRP.STRAIGHT_LINE_RATE_129,
				TCRP.STRAIGHT_LINE_RATE_130,
				TCRP.STRAIGHT_LINE_RATE_131,
				TCRP.STRAIGHT_LINE_RATE_132,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID
			FROM
				TEMP_030_CS_CF_DLR_PVT TCDP,
				TEMP_030_CS_RATE_PVT TCRP
			WHERE
				TCDP.R12_ACCOUNT = TCRP.R12_ACCOUNT -- -SS- R12_2_R12
				AND TCDP.COUNTRY_INDICATOR = TCRP.COUNTRY_INDICATOR;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_CALC_SUM_PIVOT was not loaded due to error') ;
		RAISE;
	END P_LOAD_SUMMARY_CF_PIVOT;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load seasonalization staging data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_SEASONALIZATION_STG
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_SEASONALIZATION_STG';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.DM_030_SEASONALIZATION
		SELECT DISTINCT
				COUNTRY_INDICATOR,
				TRANSACTION_YEAR,
				TRANSACTION_MONTH,
				NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY TRANSACTION_YEAR, TRANSACTION_MONTH, COUNTRY_INDICATOR), 0) AS EXPENSE_SUM_MONTH_YEAR,
				NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY TRANSACTION_MONTH, COUNTRY_INDICATOR), 0) AS EXPENSE_SUM_MONTH,
				NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY TRANSACTION_YEAR, COUNTRY_INDICATOR), 0) AS EXPENSE_SUM_YEAR,
				NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY COUNTRY_INDICATOR), 0) EXPENSE_SUM_COUNTRY,
				NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY TRANSACTION_MONTH, COUNTRY_INDICATOR), 0) / NVL(SUM(LAG_PERIOD_EXP) OVER(PARTITION BY COUNTRY_INDICATOR), 0) AS SEASONAL_RATE,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID
			FROM
				DBO.SY_030_COST_FLOW_STG
			WHERE
				TRANSACTION_YEAR < TO_CHAR(SYSDATE, 'YYYY') ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_SEASONALIZATION was not loaded due to error') ;
		RAISE;
	END P_LOAD_SEASONALIZATION_STG;
/***********************************************************************************
*
* Author:         Jill Blank
* Description: Load rows with zero values for each year not having transactions.
*              This is required for the Actuate static page design.
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_SEASONAL_DUMMY_ROWS
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_SEASONAL_DUMMY_ROWS';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.DM_030_SEASONALIZATION
		SELECT DISTINCT
				COUNTRY_INDICATOR,
				GENERATED_YEAR,
				TRANSACTION_MONTH,
				0 EXPENSE_SUM_MONTH_YR,
				0 EXPENSE_SUM_MONTH,
				0 EXPENSE_SUM_YEAR,
				0 EXPENSE_SUM_COUNTRY,
				0 SEASONAL_RATE,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID
			FROM
				DM_030_SEASONALIZATION
			CROSS JOIN SY_030_YEAR
			WHERE
				TRANSACTION_MONTH BETWEEN 1 AND 12
				AND GENERATED_YEAR >= TO_CHAR(SYSDATE, 'YYYY')
			ORDER BY
				COUNTRY_INDICATOR,
				GENERATED_YEAR,
				TRANSACTION_MONTH;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_SEASONALIZATION dummy rows not loaded due to error') ;
		RAISE;
	END P_LOAD_SEASONAL_DUMMY_ROWS;
/***********************************************************************************
*
* Author:         Jaishankar SP
* Description: This Table stores Sales, Forecast Period, 132 ship period and forecast revenue data for each account
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
*   30-Jun-2008    Changes done to the procedure p_load_forecast_rev_stg(G_RUN IN DATE)to get current month if the parameter for run_period is NULL. Code is changed from G_RUN to TRUNC(ADD_MONTHS(CASE WHEN G_RUN IS NULL THEN TRUNC(SYSDATE, 'MM') ELSE G_RUN END, -CS.LAG_PERIOD), 'MM') to get the NULL value as Current month.
***********************************************************************************/
	PROCEDURE P_LOAD_FORECAST_REV_STG(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_FORECAST_REV_STG';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.SY_030_FORECAST_REV_STG
		SELECT DISTINCT
				REPORT_TYPE,
				NULL AS GL_ACCOUNT, -- -SS-
				GL_ACCOUNT_DESCR,
				COUNTRY_INDICATOR,
				WARRANTY_FIRST_YR_IND,
				RUN_MONTH,
				PERIOD,
				FORECAST_PERIOD,
				REVENUE,
				FORECAST_REVENUE,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID,
				R12_ACCOUNT
			FROM
				(
				(
					SELECT
							RR.REPORT_TYPE,
							RR.R12_ACCOUNT, -- -SS- GL_ACCOUNT
							RR.GL_ACCOUNT_DESCR,
							RR.COUNTRY_INDICATOR,
							RR.WARRANTY_FIRST_YR_IND,
							B.RUN_MONTH,
							B.MONTH AS PERIOD,
							ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1) AS FORECAST_PERIOD,
							B.REVENUE,
							NVL((B.REVENUE * RR.AMORT_RATE), 0) AS FORECAST_REVENUE
						FROM
							(
								SELECT
										CS.REPORT_TYPE AS REPORT_TYPE,
										CS.R12_ACCOUNT, -- -SS- GL_ACCOUNT
										CS.GL_ACCOUNT_DESCR,
										COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
										CS.LAG_PERIOD AS LAG_PERIOD,
										AR.AMORTIZATION_METHOD AS AMORTIZATION_METHOD,
										WARRANTY_FIRST_YR_IND,
										(
										CASE UPPER(TRIM(AMORTIZATION_METHOD)) WHEN 'COST FLOW'
											THEN USR.COST_FLOW_RATE              WHEN 'STRAIGHT LINE'
											THEN USR.STRAIGHT_LINE_RATE
											ELSE 0
										END) AMORT_RATE
									FROM
										DBO.SY_030_CALC_SUM_STG CS
										INNER JOIN
										(
											SELECT
													R12_ACCOUNT, -- -SS- GL_ACCOUNT
													LAG_PERIOD,
													COST_FLOW_RATE,
													STRAIGHT_LINE_RATE
												FROM
													DBO.SY_030_CALC_SUM_STG
												WHERE
													COUNTRY_INDICATOR = 'USA'
										) USR
										ON CS.R12_ACCOUNT = USR.R12_ACCOUNT -- -SS- R12_2_R12
										AND CS.LAG_PERIOD = USR.LAG_PERIOD
										INNER JOIN
										DBO.UD_030_ACCOUNT_RULES AR
										ON CS.R12_ACCOUNT = AR.R12_ACCOUNT -- -SS- GL_ACCOUNT, issue 84, R12_2_R12
									ORDER BY
										REPORT_TYPE,
										R12_ACCOUNT, -- -SS- GL_ACCOUNT
										COUNTRY_INDICATOR,
										LAG_PERIOD
							)
							RR,
							(
								SELECT
										R12_ACCOUNT, -- -SS- GL_ACCOUNT
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH,
										SUM(REVENUE) AS REVENUE
									FROM
										(
											SELECT
													GL_ACCOUNT as R12_ACCOUNT, -- -SS- GL_ACCOUNT
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END) AS COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(JOURNAL_DATE, 'MM') AS MONTH,
													SUM(REVENUE_AMOUNT) AS REVENUE
												FROM
													DR_DM_030_EXT_SALES_MVW
												GROUP BY
													GL_ACCOUNT,
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END),
													TRUNC(JOURNAL_DATE, 'MM')
											UNION ALL
											SELECT DISTINCT
													R12_ACCOUNT, -- -SS- GL_ACCOUNT
													COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(ADD_MONTHS(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, - CS.LAG_PERIOD), 'MM') AS MONTH,
													0 AS REVENUE
												FROM
													DBO.SY_030_CALC_SUM_STG CS
										)
									GROUP BY
										R12_ACCOUNT, -- -SS- GL_ACCOUNT
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH
							)
							B
						WHERE
							RR.R12_ACCOUNT = B.R12_ACCOUNT -- -SS- R12_2_R12
							AND RR.COUNTRY_INDICATOR = B.COUNTRY_INDICATOR
							AND TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY') <= TO_NUMBER(TO_CHAR(
							CASE WHEN G_RUN IS NULL
								THEN TRUNC(SYSDATE, 'MM')
								ELSE G_RUN
							END, 'YYYY')) + 2
					UNION ALL
					SELECT DISTINCT
							RR.REPORT_TYPE,
							RR.R12_ACCOUNT, -- -SS- GL_ACCOUNT
							RR.GL_ACCOUNT_DESCR,
							RR.COUNTRY_INDICATOR,
							RR.WARRANTY_FIRST_YR_IND,
							B.RUN_MONTH,
							B.MONTH AS PERIOD,
							TO_DATE(('12/01/' || TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY')), 'mm/dd/yyyy') AS FORECAST_PERIOD,
							B.REVENUE,
							SUM(NVL((B.REVENUE * RR.AMORT_RATE), 0)) OVER(PARTITION BY RR.R12_ACCOUNT, RR.COUNTRY_INDICATOR, B.RUN_MONTH, B.MONTH, TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY')) AS FORECAST_REVENUE -- -SS- GL_ACCOUNT
						FROM
							(
								SELECT
										CS.REPORT_TYPE AS REPORT_TYPE,
										CS.R12_ACCOUNT, -- -SS- GL_ACCOUNT
										CS.GL_ACCOUNT_DESCR,
										COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
										CS.LAG_PERIOD AS LAG_PERIOD,
										AR.AMORTIZATION_METHOD AS AMORTIZATION_METHOD,
										WARRANTY_FIRST_YR_IND,
										(
										CASE UPPER(TRIM(AMORTIZATION_METHOD)) WHEN 'COST FLOW'
											THEN USR.COST_FLOW_RATE              WHEN 'STRAIGHT LINE'
											THEN USR.STRAIGHT_LINE_RATE
											ELSE 0
										END) AMORT_RATE
									FROM
										DBO.SY_030_CALC_SUM_STG CS
										INNER JOIN
										(
											SELECT
													R12_ACCOUNT, -- -SS- GL_ACCOUNT
													LAG_PERIOD,
													COST_FLOW_RATE,
													STRAIGHT_LINE_RATE
												FROM
													DBO.SY_030_CALC_SUM_STG
												WHERE
													COUNTRY_INDICATOR = 'USA'
										) USR
										ON CS.R12_ACCOUNT = USR.R12_ACCOUNT -- -SS- R12_2_R12
										AND CS.LAG_PERIOD = USR.LAG_PERIOD
										INNER JOIN
										DBO.UD_030_ACCOUNT_RULES AR
										ON CS.R12_ACCOUNT = AR.R12_ACCOUNT -- -SS- GL_ACCOUNT, issue 84, R12_2_R12
									ORDER BY
										REPORT_TYPE,
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										LAG_PERIOD
							)
							RR,
							(
								SELECT
										R12_ACCOUNT, -- -SS- GL_ACCOUNT
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH,
										SUM(REVENUE) AS REVENUE
									FROM
										(
											SELECT
													GL_ACCOUNT as R12_ACCOUNT, -- -SS- GL_ACCOUNT
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END) AS COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(JOURNAL_DATE, 'MM') AS MONTH,
													SUM(REVENUE_AMOUNT) AS REVENUE
												FROM
													DR_DM_030_EXT_SALES_MVW
												GROUP BY
													GL_ACCOUNT,
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END),
													TRUNC(JOURNAL_DATE, 'MM')
											UNION ALL
											SELECT DISTINCT
													R12_ACCOUNT, -- -SS- GL_ACCOUNT
													COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(ADD_MONTHS(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, - CS.LAG_PERIOD), 'MM') AS MONTH,
													0 AS REVENUE
												FROM
													DBO.SY_030_CALC_SUM_STG CS
										)
									GROUP BY
										R12_ACCOUNT, -- -SS- GL_ACCOUNT
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH
							)
							B
						WHERE
							RR.R12_ACCOUNT = B.R12_ACCOUNT -- -SS- R12_2_R12
							AND RR.COUNTRY_INDICATOR = B.COUNTRY_INDICATOR
							AND TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY') > TO_NUMBER(TO_CHAR(
							CASE WHEN G_RUN IS NULL
								THEN TRUNC(SYSDATE, 'MM')
								ELSE G_RUN
							END, 'YYYY')) + 2
				)
				)
			WHERE
				PERIOD BETWEEN ADD_MONTHS(RUN_MONTH, - 132) AND ADD_MONTHS(RUN_MONTH, - 1)
			ORDER BY
				2,
				6,
				7,
				8;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'SY_030_FORECAST_REV_STG dummy rows not loaded due to error') ;
		RAISE;
	END P_LOAD_FORECAST_REV_STG;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Delete the Revenue release data for only the run period (in case
* process needs to be re-executed for the same run period)
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_DEL_REV_RELEASE_RUN_PRD(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_DEL_REV_RELEASE_RUN_PRD';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		DELETE
			FROM
				DBO.DM_030_REV_RELEASE
			WHERE
				TO_CHAR(RUN_PERIOD, 'MM/DD/YYYY') = TO_CHAR(
				CASE WHEN G_RUN IS NULL
					THEN TRUNC(SYSDATE, 'MM')
					ELSE G_RUN
				END, 'MM/DD/YYYY') ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'Error occurred while deleting a period in Revenue Release tables') ;
		RAISE;
	END P_DEL_REV_RELEASE_RUN_PRD;
/***********************************************************************************
*
* Author:   Jaishankar SP
* Description: This Table stores forecast revenue, revenue release for period
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_REVENUE
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_REVENUE';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.DM_030_REV_RELEASE
		SELECT
				DM_030_REV_RELEASE_SEQ.NEXTVAL AS DM_030_REV_RLSE_KEY,
				REPORT_TYPE,
				R12_ACCOUNT, -- -SS- GL_ACCOUNT
				GL_ACCOUNT_DESCR,
				COUNTRY_INDICATOR,
				WARRANTY_FIRST_YR_IND,
				SHIP_PERIOD,
				FORECAST_PERIOD,
				RUN_PERIOD,
				SHIP_PERIOD_SALES_DLR,
				FORECAST_REVENUE,
				FORECAST_MNTHLY_TOTAL,
				FORECAST_YR_TOTAL,
				SEASONLIZATION_RATE,
				REC_REV_MNTHLY,
				REC_REV_PRE_MNTHLY,
				REC_REV_FOR_PERIOD,
				DEFERRED_REVENUE,
				SHORT_TERM_DR,
				LONG_TERM_DR,
				ED_CREATE_DATE,
				ED_CREATE_ID,
				ED_UPDATE_DATE,
				ED_UPDATE_ID,
				REV_RELEASE_TOTAL
			FROM
				(
					SELECT
							A.REPORT_TYPE,
							A.R12_ACCOUNT, -- -SS- GL_ACCOUNT
							A.GL_ACCOUNT_DESCR,
							A.COUNTRY_INDICATOR,
							A.WARRANTY_FIRST_YR_IND,
							A. PERIOD AS SHIP_PERIOD,
							A.FORECAST_PERIOD,
							A.RUN_MONTH AS RUN_PERIOD,
							A.REVENUE AS SHIP_PERIOD_SALES_DLR,
							A. FORECAST_REVENUE,
							A. MONTH_RR AS FORECAST_MNTHLY_TOTAL,
							A. TOTAL_YEAR_RR AS FORECAST_YR_TOTAL,
							A. SEASONAL_RATE AS SEASONLIZATION_RATE,
							CASE WHEN COUNT(A.FORECAST_PERIOD) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'yyyy')) < 12 AND A.FORECAST_PERIOD <(RUN_MONTH) -- -SS- GL_ACCOUNT
								THEN A.MONTH_RR
								ELSE A.TOTAL_RECOGNIZED_REVENUE
							END AS REC_REV_MNTHLY,
							A.PREVIOUS_RECOGNIZED_REVENUE AS REC_REV_PRE_MNTHLY,
							CASE WHEN A.FORECAST_PERIOD =(RUN_MONTH)
								THEN A. DEFERRED_REVENUE
								ELSE 0
							END AS REC_REV_FOR_PERIOD,
							A. DEFERRED_REVENUE,
							DF.SHORT_TERM_DR,
							DF.LONG_TERM_DR,
							SYSDATE AS ED_CREATE_DATE,
							L_PROC_NAME AS ED_CREATE_ID,
							SYSDATE AS ED_UPDATE_DATE,
							L_PROC_NAME AS ED_UPDATE_ID,
							CASE WHEN TO_CHAR(A.FORECAST_PERIOD, 'MON') = 'DEC'
								THEN(SUM(TOTAL_RECOGNIZED_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.PERIOD, 'MMYYYY'), TO_CHAR(A.FORECAST_PERIOD, 'YYYY'))) -- -SS-
								ELSE 0
							END AS REV_RELEASE_TOTAL
						FROM
							(
								SELECT
										A.REPORT_TYPE,
										A.R12_ACCOUNT, -- -SS- GL_ACCOUNT
										A.GL_ACCOUNT_DESCR,
										A.COUNTRY_INDICATOR,
										A.WARRANTY_FIRST_YR_IND,
										PERIOD,
										FORECAST_PERIOD,
										A.RUN_MONTH,
										REVENUE,
										FORECAST_REVENUE,
										SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY')) AS MONTH_RR, -- -SS-
										CASE WHEN TO_CHAR(A.FORECAST_PERIOD, 'MON') = 'DEC'
											THEN SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) -- -SS-
											ELSE 0
										END AS TOTAL_YEAR_RR,
										CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
											THEN(
												CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
													THEN NVL(B.SEASONAL_RATE, 0)
													ELSE 1
												END)
											ELSE 0
										END AS SEASONAL_RATE,
										(
										CASE WHEN A.FORECAST_PERIOD <(RUN_MONTH)
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) * -- -SS- GL_ACCOUNT
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY')) -- -SS- GL_ACCOOUNT
												END)
											ELSE 0
										END) AS TOTAL_RECOGNIZED_REVENUE,
										(
										CASE WHEN A.FORECAST_PERIOD < TRUNC(ADD_MONTHS((A.RUN_MONTH), - 1), 'MM')
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM'), A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) * -- -SS- GL_ACCOUNT
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM'), A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY')) -- -SS- GL_ACCOUNT
												END)
											ELSE 0
										END) AS PREVIOUS_RECOGNIZED_REVENUE,
										(
										CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
												END)
											ELSE 0
										END) AS DEFERRED_REVENUE
									FROM
										DBO.SY_030_FORECAST_REV_STG A,
										(
											SELECT DISTINCT
													COUNTRY_INDICATOR,
													TRANSACTION_MONTH,
													SEASONAL_RATE
												FROM
													DBO.DM_030_SEASONALIZATION
												WHERE
													COUNTRY_INDICATOR = 'USA'
													AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
										)
										B
									WHERE
										TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
									ORDER BY
										1 DESC,
										5,
										6
							)
							A,
							(
								SELECT -- QUERY TO CALCULATE SHORT TERM AND LONG TERN DEFERRED REVENUE
										AA.REPORT_TYPE,
										AA.R12_ACCOUNT,
										AA.COUNTRY_INDICATOR,
										AA.WARRANTY_FIRST_YR_IND,
										AA.DF_PERIOD,
										AA.SHORT_TERM_DR,
										LONG_TERM_DR
									FROM
										(
											SELECT -- QUERY TO CALCULATE SHORT TREM DF
													DISTINCT A.REPORT_TYPE,
													A.R12_ACCOUNT,
													A.COUNTRY_INDICATOR,
													A.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM') AS DF_PERIOD,
													NVL(SUM(DEFERRED_REVENUE), 0) AS SHORT_TERM_DR
												FROM
													(
														SELECT DISTINCT
																A.REPORT_TYPE,
																A.R12_ACCOUNT,
																A.COUNTRY_INDICATOR,
																A.WARRANTY_FIRST_YR_IND,
																A.RUN_MONTH,
																FORECAST_PERIOD,
																DEFERRED_REVENUE
															FROM
																(
																	SELECT
																			A.REPORT_TYPE,
																			A.R12_ACCOUNT,
																			A.GL_ACCOUNT_DESCR,
																			A.COUNTRY_INDICATOR,
																			A.WARRANTY_FIRST_YR_IND,
																			A.RUN_MONTH,
																			PERIOD,
																			FORECAST_PERIOD,
																			REVENUE,
																			FORECAST_REVENUE,
																			(
																			CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
																				THEN(
																					CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
																						THEN(SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
																							CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
																								THEN NVL(B.SEASONAL_RATE, 0)
																								ELSE 1
																							END)
																						ELSE SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
																					END)
																				ELSE 0
																			END) AS DEFERRED_REVENUE
																		FROM
																			DBO.SY_030_FORECAST_REV_STG A,
																			(
																				SELECT DISTINCT
																						COUNTRY_INDICATOR,
																						TRANSACTION_MONTH,
																						SEASONAL_RATE
																					FROM
																						DBO.DM_030_SEASONALIZATION
																					WHERE
																						COUNTRY_INDICATOR = 'USA'
																						AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
																			)
																			B
																		WHERE
																			TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
																		ORDER BY
																			1 DESC,
																			5,
																			6
																)
																A
															WHERE
																FORECAST_PERIOD >= TRUNC(A.RUN_MONTH, 'MM')
													)
													A
												WHERE
													FORECAST_PERIOD BETWEEN TRUNC(RUN_MONTH, 'MM') AND TRUNC(ADD_MONTHS(A.RUN_MONTH, 11), 'MM')
												GROUP BY
													A.REPORT_TYPE,
													A.R12_ACCOUNT,
													A.COUNTRY_INDICATOR,
													A.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM')
										)
										AA,
										(
											SELECT -- QUERY TO CALCULATE LONG TREM DF
													DISTINCT B.REPORT_TYPE,
													B.R12_ACCOUNT,
													B.COUNTRY_INDICATOR,
													B.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(B.RUN_MONTH, - 1), 'MM') AS DF_PERIOD,
													NVL(SUM(DEFERRED_REVENUE), 0) AS LONG_TERM_DR
												FROM
													(
														SELECT DISTINCT
																A.REPORT_TYPE,
																A.R12_ACCOUNT,
																A.COUNTRY_INDICATOR,
																A.WARRANTY_FIRST_YR_IND,
																A.RUN_MONTH,
																FORECAST_PERIOD,
																DEFERRED_REVENUE
															FROM
																(
																	SELECT
																			A.REPORT_TYPE,
																			A.R12_ACCOUNT,
																			A.GL_ACCOUNT_DESCR,
																			A.COUNTRY_INDICATOR,
																			A.WARRANTY_FIRST_YR_IND,
																			A.RUN_MONTH,
																			PERIOD,
																			FORECAST_PERIOD,
																			REVENUE,
																			FORECAST_REVENUE,
																			(
																			CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
																				THEN(
																					CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
																						THEN(SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
																							CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
																								THEN NVL(B.SEASONAL_RATE, 0)
																								ELSE 1
																							END)
																						ELSE SUM(A.FORECAST_REVENUE) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
																					END)
																				ELSE 0
																			END) AS DEFERRED_REVENUE
																		FROM
																			DBO.SY_030_FORECAST_REV_STG A,
																			(
																				SELECT DISTINCT
																						COUNTRY_INDICATOR,
																						TRANSACTION_MONTH,
																						SEASONAL_RATE
																					FROM
																						DBO.DM_030_SEASONALIZATION
																					WHERE
																						COUNTRY_INDICATOR = 'USA'
																						AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
																			)
																			B
																		WHERE
																			TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
																		ORDER BY
																			1 DESC,
																			5,
																			6
																)
																A
															WHERE
																FORECAST_PERIOD >= TRUNC(RUN_MONTH, 'MM')
													)
													B
												WHERE
													FORECAST_PERIOD > TRUNC(ADD_MONTHS(RUN_MONTH, 11), 'MM')
												GROUP BY
													B.REPORT_TYPE,
													B.R12_ACCOUNT,
													B.COUNTRY_INDICATOR,
													B.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(B.RUN_MONTH, - 1), 'MM')
										)
										BB
									WHERE
										AA.REPORT_TYPE = BB.REPORT_TYPE
										AND AA.R12_ACCOUNT = BB.R12_ACCOUNT -- -SS- R12_2_R12
										AND AA.COUNTRY_INDICATOR = BB.COUNTRY_INDICATOR
							)
							DF
						WHERE
							A.REPORT_TYPE = DF.REPORT_TYPE (+)
							AND A.R12_ACCOUNT = DF.R12_ACCOUNT(+) -- -SS- R12_2_R12
							AND A.COUNTRY_INDICATOR = DF.COUNTRY_INDICATOR (+)
							AND A.FORECAST_PERIOD = DF.DF_PERIOD (+)
						ORDER BY
							2,
							4,
							8,
							6,
							7
				) ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_REV_RELEASE dummy rows not loaded due to error') ;
		RAISE;
	END P_LOAD_REVENUE;
/***********************************************************************************
*
* Author:         Jaishnakar SP
* Description: This Table stores Sales, Forecast Period, 132 ship period and commission data for each GL account
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
*   30-Jun-2008    Changes done to the procedure p_load_forecast_comm_stg(G_RUN IN DATE) to get current month if the parameter for run_period is NULL. Code is changed from G_RUN to TRUNC(ADD_MONTHS(CASE WHEN G_RUN IS NULL THEN TRUNC(SYSDATE, 'MM') ELSE G_RUN END, -CS.LAG_PERIOD), 'MM') to get the NULL value as Current month.
***********************************************************************************/
	PROCEDURE P_LOAD_FORECAST_COMM_STG(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_FORECAST_COMM_STG';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT INTO DBO.SY_030_FORECAST_COMM_STG
		SELECT DISTINCT
				REPORT_TYPE,
				NULL AS GL_ACCOUNT, -- -SS-
				GL_ACCOUNT_DESCR,
				COUNTRY_INDICATOR,
				WARRANTY_FIRST_YR_IND,
				RUN_MONTH,
				JOURNAL_PERIOD,
				FORECAST_PERIOD,
				COMMISSION_DLR,
				FORECAST_COMMISSION,
				SYSDATE AS ED_CREATE_DATE,
				L_PROC_NAME AS ED_CREATE_ID,
				SYSDATE AS ED_UPDATE_DATE,
				L_PROC_NAME AS ED_UPDATE_ID,
				R12_ACCOUNT -- -SS-
			FROM
				(
				(
					SELECT
							RR.REPORT_TYPE,
							RR.R12_ACCOUNT,
							RR.GL_ACCOUNT_DESCR,
							RR.COUNTRY_INDICATOR,
							RR.WARRANTY_FIRST_YR_IND,
							B.RUN_MONTH,
							B.MONTH AS JOURNAL_PERIOD,
							ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1) AS FORECAST_PERIOD,
							B.COMMISSION AS COMMISSION_DLR,
							NVL((B.COMMISSION * RR.AMORT_RATE), 0) AS FORECAST_COMMISSION
						FROM
							(
								SELECT
										CS.REPORT_TYPE AS REPORT_TYPE,
										CS.R12_ACCOUNT, -- -SS- GL_ACCOUNT
										CS.GL_ACCOUNT_DESCR,
										COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
										CS.LAG_PERIOD AS LAG_PERIOD,
										AR.AMORTIZATION_METHOD AS AMORTIZATION_METHOD,
										WARRANTY_FIRST_YR_IND,
										(
										CASE UPPER(TRIM(AMORTIZATION_METHOD)) WHEN 'COST FLOW'
											THEN USR.COST_FLOW_RATE              WHEN 'STRAIGHT LINE'
											THEN USR.STRAIGHT_LINE_RATE
											ELSE 0
										END) AMORT_RATE
									FROM
										DBO.SY_030_CALC_SUM_STG CS,
										(
											SELECT
													R12_ACCOUNT,
													LAG_PERIOD,
													COST_FLOW_RATE,
													STRAIGHT_LINE_RATE
												FROM
													DBO.SY_030_CALC_SUM_STG
												WHERE
													COUNTRY_INDICATOR = 'USA'
										)
										USR,
										DBO.UD_030_ACCOUNT_RULES AR
									WHERE
										CS.R12_ACCOUNT = AR.R12_ACCOUNT -- -SS- GL_ACCONT, issue 84, R12_2_R12
										AND CS.R12_ACCOUNT = USR.R12_ACCOUNT -- -SS- R12_2_R12
										AND CS.LAG_PERIOD = USR.LAG_PERIOD
									ORDER BY
										REPORT_TYPE,
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										LAG_PERIOD
							)
							RR,
							(
								SELECT
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH,
										SUM(COMMISSION) AS COMMISSION
									FROM
										(
											SELECT
													GL_ACCOUNT AS R12_ACCOUNT, -- -SS-
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END) AS COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(JOURNAL_DATE, 'MM') AS MONTH,
													SUM(COMMISSION_AMOUNT) AS COMMISSION
												FROM
													DR_DM_030_EXT_COMM_MVW
												GROUP BY
													GL_ACCOUNT,
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END),
													TRUNC(JOURNAL_DATE, 'MM')
											UNION ALL
											SELECT DISTINCT
													R12_ACCOUNT,
													COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(ADD_MONTHS(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, - CS.LAG_PERIOD), 'MM') AS MONTH,
													0 AS COMMISSION
												FROM
													DBO.SY_030_CALC_SUM_STG CS
										)
									GROUP BY
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH
							)
							B
						WHERE
							RR.R12_ACCOUNT = B.R12_ACCOUNT -- -SS- R12_2_R12
							AND RR.COUNTRY_INDICATOR = B.COUNTRY_INDICATOR
							AND TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY') <= TO_NUMBER(TO_CHAR(
							CASE WHEN G_RUN IS NULL
								THEN TRUNC(SYSDATE, 'MM')
								ELSE G_RUN
							END, 'YYYY')) + 2
					UNION ALL
					SELECT DISTINCT
							RR.REPORT_TYPE,
							RR.R12_ACCOUNT,
							RR.GL_ACCOUNT_DESCR,
							RR.COUNTRY_INDICATOR,
							RR.WARRANTY_FIRST_YR_IND,
							B.RUN_MONTH,
							B.MONTH AS PERIOD,
							TO_DATE(('12/01/' || TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY')), 'mm/dd/yyyy') AS FORECAST_PERIOD,
							B.COMMISSION,
							SUM(NVL((B.COMMISSION * RR.AMORT_RATE), 0)) OVER(PARTITION BY RR.R12_ACCOUNT, RR.COUNTRY_INDICATOR, B.RUN_MONTH, B.MONTH, TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY')) AS FORECAST_COMMISSION
						FROM
							(
								SELECT
										CS.REPORT_TYPE AS REPORT_TYPE,
										CS.R12_ACCOUNT AS R12_ACCOUNT,
										CS.GL_ACCOUNT_DESCR,
										COUNTRY_INDICATOR AS COUNTRY_INDICATOR,
										CS.LAG_PERIOD AS LAG_PERIOD,
										AR.AMORTIZATION_METHOD AS AMORTIZATION_METHOD,
										WARRANTY_FIRST_YR_IND,
										(
										CASE UPPER(TRIM(AMORTIZATION_METHOD)) WHEN 'COST FLOW'
											THEN USR.COST_FLOW_RATE              WHEN 'STRAIGHT LINE'
											THEN USR.STRAIGHT_LINE_RATE
											ELSE 0
										END) AMORT_RATE
									FROM
										DBO.SY_030_CALC_SUM_STG CS,
										(
											SELECT
													R12_ACCOUNT,
													LAG_PERIOD,
													COST_FLOW_RATE,
													STRAIGHT_LINE_RATE
												FROM
													DBO.SY_030_CALC_SUM_STG
												WHERE
													COUNTRY_INDICATOR = 'USA'
										)
										USR,
										DBO.UD_030_ACCOUNT_RULES AR
									WHERE
										CS.R12_ACCOUNT = AR.R12_ACCOUNT -- -SS- GL_ACCOUNT, issue 84, R12_2_R12
										AND CS.R12_ACCOUNT = USR.R12_ACCOUNT -- -SS- R12_2_R12
										AND CS.LAG_PERIOD = USR.LAG_PERIOD
									ORDER BY
										REPORT_TYPE,
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										LAG_PERIOD
							)
							RR,
							(
								SELECT
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH,
										SUM(COMMISSION) AS COMMISSION
									FROM
										(
											SELECT
													GL_ACCOUNT AS R12_ACCOUNT, -- -SS-
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END) AS COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(JOURNAL_DATE, 'MM') AS MONTH,
													SUM(COMMISSION_AMOUNT) AS COMMISSION
												FROM
													DR_DM_030_EXT_COMM_MVW
												GROUP BY
													GL_ACCOUNT,
													(
													CASE UPPER(TRIM(COUNTRY_INDICATOR)) WHEN 'CAD'
														THEN 'CAN'                         WHEN 'USD'
														THEN 'USA'                         WHEN 'CAN'
														THEN 'CAN'                         WHEN 'USA'
														THEN 'USA'
														ELSE NULL
													END),
													TRUNC(JOURNAL_DATE, 'MM')
											UNION ALL
											SELECT DISTINCT
													R12_ACCOUNT,
													COUNTRY_INDICATOR,
													TRUNC(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, 'MM') AS RUN_MONTH,
													TRUNC(ADD_MONTHS(
													CASE WHEN G_RUN IS NULL
														THEN TRUNC(SYSDATE, 'MM')
														ELSE G_RUN
													END, - CS.LAG_PERIOD), 'MM') AS MONTH,
													0 AS COMMISSION
												FROM
													DBO.SY_030_CALC_SUM_STG CS
										)
									GROUP BY
										R12_ACCOUNT,
										COUNTRY_INDICATOR,
										RUN_MONTH,
										MONTH
							)
							B
						WHERE
							RR.R12_ACCOUNT = B.R12_ACCOUNT -- -SS- R12_2_R12
							AND RR.COUNTRY_INDICATOR = B.COUNTRY_INDICATOR
							AND TO_CHAR(ADD_MONTHS(B.MONTH, RR.LAG_PERIOD - 1), 'YYYY') > TO_NUMBER(TO_CHAR(
							CASE WHEN G_RUN IS NULL
								THEN TRUNC(SYSDATE, 'MM')
								ELSE G_RUN
							END, 'YYYY')) + 2
				)
				)
			WHERE
				JOURNAL_PERIOD BETWEEN ADD_MONTHS(RUN_MONTH, - 132) AND ADD_MONTHS(RUN_MONTH, - 1)
			ORDER BY
				2,
				6,
				7,
				8;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'SY_030_FORECAST_COMM_STG dummy rows not loaded due to error') ;
		RAISE;
	END P_LOAD_FORECAST_COMM_STG;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Delete the commission data for only the run period (in case
* process needs to be re-executed for the same run period)
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_DEL_COMM_AMORT_RUN_PRD(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_DEL_COMM_AMORT_RUN_PRD';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		DELETE
			FROM
				DBO.DM_030_COMM_AMORTIZATION
			WHERE
				TO_CHAR(RUN_PERIOD, 'MM/DD/YYYY') = TO_CHAR(
				CASE WHEN G_RUN IS NULL
					THEN TRUNC(SYSDATE, 'MM')
					ELSE G_RUN
				END, 'MM/DD/YYYY') ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'Error occurred while deleting a period in Commission Amortization tables') ;
		RAISE;
	END P_DEL_COMM_AMORT_RUN_PRD;
/***********************************************************************************
*
* Author:         Jaishankar SP
* Description: This Table stores comission dollar, forecast commission, Commission amortization for period
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_COMMISSION
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_COMMISSION';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		INSERT /*+ APPEND */
			INTO DBO.DM_030_COMM_AMORTIZATION
		SELECT
				DBO.DM_030_COMM_AMORT_SEQ.NEXTVAL AS DM_030_COMM_AMORT_KEY,
				REPORT_TYPE,
				R12_ACCOUNT,
				GL_ACCOUNT_DESCR,
				COUNTRY_INDICATOR,
				WARRANTY_FIRST_YR_IND,
				SHIP_PERIOD,
				FORECAST_PERIOD,
				RUN_PERIOD,
				SHIP_PERIOD_COMM_DLR,
				FORECAST_COMMISSION,
				FORECAST_MNTHLY_TOTAL,
				FORECAST_YR_TOTAL,
				SEASONLIZATION_RATE,
				COMM_AMORT_MNTHLY,
				COMM_AMORT_PREV_MNTHLY,
				COMM_AMORT_FOR_PERIOD,
				PREPAID_COMMISSION,
				SHORT_TERM_PP_COMM,
				LONG_TERM_PP_COMM,
				COMM_AMORT_TOTAL,
				ED_CREATE_DATE,
				ED_CREATE_ID,
				ED_UPDATE_DATE,
				ED_UPDATE_ID
			FROM
				(
					SELECT
							A.REPORT_TYPE,
							A.R12_ACCOUNT,
							A.GL_ACCOUNT_DESCR,
							A.COUNTRY_INDICATOR,
							A.WARRANTY_FIRST_YR_IND,
							A. JOURNAL_PERIOD AS SHIP_PERIOD,
							A.FORECAST_PERIOD,
							A.RUN_MONTH AS RUN_PERIOD,
							A.COMMISSION_DLR AS SHIP_PERIOD_COMM_DLR,
							A. FORECAST_COMMISSION,
							A. MONTH_COMM AS FORECAST_MNTHLY_TOTAL,
							A. TOTAL_YEAR_COMM AS FORECAST_YR_TOTAL,
							A. SEASONAL_RATE AS SEASONLIZATION_RATE,
							CASE WHEN COUNT(A.FORECAST_PERIOD) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'yyyy')) < 12 AND A.FORECAST_PERIOD <(RUN_MONTH)
								THEN A.MONTH_COMM
								ELSE A.TOTAL_RECOGNIZED_COMMISSION
							END AS COMM_AMORT_MNTHLY,
							A.PREVIOUS_RECOGNIZED_COMMISSION AS COMM_AMORT_PREV_MNTHLY,
							CASE WHEN A.FORECAST_PERIOD =(RUN_MONTH)
								THEN A. PREPAID_COMMISSION
								ELSE 0
							END AS COMM_AMORT_FOR_PERIOD,
							A. PREPAID_COMMISSION,
							DF.SHORT_TERM_PP_COMM,
							DF.LONG_TERM_PP_COMM,
							CASE WHEN TO_CHAR(A.FORECAST_PERIOD, 'MON') = 'DEC'
								THEN(SUM(TOTAL_RECOGNIZED_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.JOURNAL_PERIOD, 'MMYYYY'), TO_CHAR(A.FORECAST_PERIOD, 'YYYY')))
								ELSE 0
							END AS COMM_AMORT_TOTAL,
							SYSDATE AS ED_CREATE_DATE,
							L_PROC_NAME AS ED_CREATE_ID,
							SYSDATE AS ED_UPDATE_DATE,
							L_PROC_NAME AS ED_UPDATE_ID
						FROM
							(
								SELECT
										A.REPORT_TYPE,
										A.R12_ACCOUNT,
										A.GL_ACCOUNT_DESCR,
										A.COUNTRY_INDICATOR,
										A.WARRANTY_FIRST_YR_IND,
										JOURNAL_PERIOD,
										FORECAST_PERIOD,
										A.RUN_MONTH,
										COMMISSION_DLR,
										FORECAST_COMMISSION,
										SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY')) AS MONTH_COMM,
										CASE WHEN TO_CHAR(A.FORECAST_PERIOD, 'MON') = 'DEC'
											THEN SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY'))
											ELSE 0
										END AS TOTAL_YEAR_COMM,
										CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
											THEN(
												CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
													THEN NVL(B.SEASONAL_RATE, 0)
													ELSE 1
												END)
											ELSE 0
										END AS SEASONAL_RATE,
										(
										CASE WHEN A.FORECAST_PERIOD <(RUN_MONTH)
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
												END)
											ELSE 0
										END) AS TOTAL_RECOGNIZED_COMMISSION,
										(
										CASE WHEN A.FORECAST_PERIOD < TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM')
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM'), A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM'), A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
												END)
											ELSE 0
										END) AS PREVIOUS_RECOGNIZED_COMMISSION,
										(
										CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
											THEN(
												CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
													THEN(SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
														CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
															THEN NVL(B.SEASONAL_RATE, 0)
															ELSE 1
														END)
													ELSE SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
												END)
											ELSE 0
										END) AS PREPAID_COMMISSION
									FROM
										DBO.SY_030_FORECAST_COMM_STG A,
										(
											SELECT DISTINCT
													COUNTRY_INDICATOR,
													TRANSACTION_MONTH,
													SEASONAL_RATE
												FROM
													DBO.DM_030_SEASONALIZATION
												WHERE
													COUNTRY_INDICATOR = 'USA'
													AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
										)
										B
									WHERE
										TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
									ORDER BY
										1 DESC,
										5,
										6
							)
							A,
							(
								SELECT -- QUERY TO CALCULATE SHORT TERM AND LONG TERN DEFERRED COMMISSION
										AA.REPORT_TYPE,
										AA.R12_ACCOUNT,
										AA.COUNTRY_INDICATOR,
										AA.WARRANTY_FIRST_YR_IND,
										AA.DF_PERIOD,
										AA.SHORT_TERM_PP_COMM,
										LONG_TERM_PP_COMM
									FROM
										(
											SELECT -- QUERY TO CALCULATE SHORT TREM DF
													DISTINCT A.REPORT_TYPE,
													A.R12_ACCOUNT,
													A.COUNTRY_INDICATOR,
													A.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM') AS DF_PERIOD,
													NVL(SUM(DEFERRED_COMMISSION), 0) AS SHORT_TERM_PP_COMM
												FROM
													(
														SELECT DISTINCT
																A.REPORT_TYPE,
																A.R12_ACCOUNT,
																A.COUNTRY_INDICATOR,
																A.WARRANTY_FIRST_YR_IND,
																A.RUN_MONTH,
																FORECAST_PERIOD,
																DEFERRED_COMMISSION
															FROM
																(
																	SELECT
																			A.REPORT_TYPE,
																			A.R12_ACCOUNT,
																			A.GL_ACCOUNT_DESCR,
																			A.COUNTRY_INDICATOR,
																			A.WARRANTY_FIRST_YR_IND,
																			A.RUN_MONTH,
																			JOURNAL_PERIOD,
																			FORECAST_PERIOD,
																			COMMISSION_DLR,
																			FORECAST_COMMISSION,
																			(
																			CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
																				THEN(
																					CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
																						THEN(SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
																							CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
																								THEN NVL(B.SEASONAL_RATE, 0)
																								ELSE 1
																							END)
																						ELSE SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
																					END)
																				ELSE 0
																			END) AS DEFERRED_COMMISSION
																		FROM
																			DBO.SY_030_FORECAST_COMM_STG A,
																			(
																				SELECT DISTINCT
																						COUNTRY_INDICATOR,
																						TRANSACTION_MONTH,
																						SEASONAL_RATE
																					FROM
																						DBO.DM_030_SEASONALIZATION
																					WHERE
																						COUNTRY_INDICATOR = 'USA'
																						AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
																			)
																			B
																		WHERE
																			TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
																		ORDER BY
																			1 DESC,
																			5,
																			6
																)
																A
															WHERE
																FORECAST_PERIOD >= TRUNC(A.RUN_MONTH, 'MM')
													)
													A
												WHERE
													FORECAST_PERIOD BETWEEN TRUNC(RUN_MONTH, 'MM') AND TRUNC(ADD_MONTHS(A.RUN_MONTH, 11), 'MM')
												GROUP BY
													A.REPORT_TYPE,
													A.R12_ACCOUNT,
													A.COUNTRY_INDICATOR,
													A.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(A.RUN_MONTH, - 1), 'MM')
										)
										AA,
										(
											SELECT -- QUERY TO CALCULATE LONG TREM DF
													DISTINCT B.REPORT_TYPE,
													B.R12_ACCOUNT,
													B.COUNTRY_INDICATOR,
													B.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(B.RUN_MONTH, - 1), 'MM') AS DF_PERIOD,
													NVL(SUM(DEFERRED_COMMISSION), 0) AS LONG_TERM_PP_COMM
												FROM
													(
														SELECT DISTINCT
																A.REPORT_TYPE,
																A.R12_ACCOUNT,
																A.COUNTRY_INDICATOR,
																A.WARRANTY_FIRST_YR_IND,
																A.RUN_MONTH,
																FORECAST_PERIOD,
																DEFERRED_COMMISSION
															FROM
																(
																	SELECT
																			A.REPORT_TYPE,
																			A.R12_ACCOUNT,
																			A.GL_ACCOUNT_DESCR,
																			A.COUNTRY_INDICATOR,
																			A.WARRANTY_FIRST_YR_IND,
																			A.RUN_MONTH,
																			JOURNAL_PERIOD,
																			FORECAST_PERIOD,
																			COMMISSION_DLR,
																			FORECAST_COMMISSION,
																			(
																			CASE WHEN A.FORECAST_PERIOD >=(RUN_MONTH)
																				THEN(
																					CASE WHEN A.WARRANTY_FIRST_YR_IND IS NULL
																						THEN(SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) *
																							CASE WHEN TO_NUMBER(TO_CHAR(A.FORECAST_PERIOD, 'YYYY')) <= TO_NUMBER(TO_CHAR(RUN_MONTH, 'YYYY')) + 2
																								THEN NVL(B.SEASONAL_RATE, 0)
																								ELSE 1
																							END)
																						ELSE SUM(A.FORECAST_COMMISSION) OVER(PARTITION BY A.R12_ACCOUNT, A.RUN_MONTH, A.COUNTRY_INDICATOR, TO_CHAR(A.FORECAST_PERIOD, 'MMYYYY'))
																					END)
																				ELSE 0
																			END) AS DEFERRED_COMMISSION
																		FROM
																			DBO.SY_030_FORECAST_COMM_STG A,
																			(
																				SELECT DISTINCT
																						COUNTRY_INDICATOR,
																						TRANSACTION_MONTH,
																						SEASONAL_RATE
																					FROM
																						DBO.DM_030_SEASONALIZATION
																					WHERE
																						COUNTRY_INDICATOR = 'USA'
																						AND TRANSACTION_YEAR = TO_CHAR(SYSDATE, 'YYYY') - 1
																			)
																			B
																		WHERE
																			TO_CHAR(A.FORECAST_PERIOD, 'MM') = B.TRANSACTION_MONTH
																		ORDER BY
																			1 DESC,
																			5,
																			6
																)
																A
															WHERE
																FORECAST_PERIOD >= TRUNC(RUN_MONTH, 'MM')
													)
													B
												WHERE
													FORECAST_PERIOD > TRUNC(ADD_MONTHS(RUN_MONTH, 11), 'MM')
												GROUP BY
													B.REPORT_TYPE,
													B.R12_ACCOUNT,
													B.COUNTRY_INDICATOR,
													B.WARRANTY_FIRST_YR_IND,
													TRUNC(ADD_MONTHS(B.RUN_MONTH, - 1), 'MM')
										)
										BB
									WHERE
										AA.REPORT_TYPE = BB.REPORT_TYPE
										AND AA.R12_ACCOUNT = BB.R12_ACCOUNT -- -SS- R12_2_R12
										AND AA.COUNTRY_INDICATOR = BB.COUNTRY_INDICATOR
							)
							DF
						WHERE
							A.REPORT_TYPE = DF.REPORT_TYPE (+)
							AND A.R12_ACCOUNT = DF.R12_ACCOUNT(+) -- -SS- R12_2_R12
							AND A.COUNTRY_INDICATOR = DF.COUNTRY_INDICATOR (+)
							AND A.FORECAST_PERIOD = DF.DF_PERIOD (+)
						ORDER BY
							2,
							4,
							8,
							6,
							7
				) ;
		COMMIT;
		L_LEVEL := 2;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'DM_030_COMM_AMORTIZATION dummy rows not loaded due to error') ;
		RAISE;
	END P_LOAD_COMMISSION;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Delete the revenue release and commission data for run period older than 36 months
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_DEL_REV_COMM_RUN(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_DEL_REV_COMM_RUN';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		DELETE
			FROM
				DBO.DM_030_REV_RELEASE
			WHERE
				RUN_PERIOD < ADD_MONTHS(
				CASE WHEN G_RUN IS NULL
					THEN TRUNC(SYSDATE, 'MM')
					ELSE G_RUN
				END, - 13) ;
		COMMIT;
		L_LEVEL := 2;
		DELETE
			FROM
				DBO.DM_030_COMM_AMORTIZATION
			WHERE
				RUN_PERIOD < ADD_MONTHS(
				CASE WHEN G_RUN IS NULL
					THEN TRUNC(SYSDATE, 'MM')
					ELSE G_RUN
				END, - 13) ;
		COMMIT;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), 'Error occurred while deleting older run periods of Revenue and Commission tables') ;
		RAISE;
	END P_DEL_REV_COMM_RUN;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load the cost flow data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_COST_FLOW
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_COST_FLOW';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		P_LOAD_LAG_RULES;
		L_LEVEL := 2;
		P_LOAD_TEMP_COST_FLOW;
		L_LEVEL := 3;
		P_TRUNCATE_LISTED_TABLE('DBO', 'SY_030_COST_FLOW_STG') ;
		L_LEVEL := 4;
		P_LOAD_STG_CF;
		L_LEVEL := 5;
		P_LOAD_STG_CF_ZEROS;
		L_LEVEL := 6;
		P_TRUNCATE_LISTED_TABLE('DBO', 'DM_030_COST_FLOW_PIVOT') ;
		L_LEVEL := 7;
		P_LOAD_CF_PIVOT;
		L_LEVEL := 8;
		P_TRUNCATE_LISTED_TABLE('DBO', 'SY_030_CALC_SUM_STG') ;
		L_LEVEL := 9;
		P_LOAD_SUMMARY_STG_CF;
		L_LEVEL := 10;
		P_TRUNCATE_LISTED_TABLE('DBO', 'DM_030_CALC_SUM_PIVOT') ;
		L_LEVEL := 11;
		P_LOAD_TEMP_030_CS_CF_DLR_PVT;
		L_LEVEL := 12;
		P_LOAD_TEMP_030_CS_RATE_PVT;
		L_LEVEL := 13;
		P_LOAD_SUMMARY_CF_PIVOT;
		L_LEVEL := 14;
		DBMS_OUTPUT.PUT_LINE('DWBS_SUCCESS') ;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), NULL) ;
		DBMS_OUTPUT.PUT_LINE('DWBS_FAILURE') ;
	END P_LOAD_COST_FLOW;
/***********************************************************************************
*
* Author: Jill Blank
* Description: Load the seasonalization data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_SEASONALIZATION
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_SEASONALIZATION';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		P_TRUNCATE_LISTED_TABLE('DBO', 'DM_030_SEASONALIZATION') ;
		L_LEVEL := 2;
		P_LOAD_SEASONALIZATION_STG;
		L_LEVEL := 3;
		P_LOAD_SEASONAL_DUMMY_ROWS;
		L_LEVEL := 4;
		DBMS_OUTPUT.PUT_LINE('DWBS_SUCCESS') ;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), NULL) ;
		DBMS_OUTPUT.PUT_LINE('DWBS_FAILURE') ;
	END P_LOAD_SEASONALIZATION;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Load the Revenue Release data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_REVENUE_RELEASE(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_REVENUE_RELEASE';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		P_TRUNCATE_LISTED_TABLE('DBO', 'SY_030_FORECAST_REV_STG') ;
		L_LEVEL := 2;
		P_DEL_REV_RELEASE_RUN_PRD(G_RUN) ;
		L_LEVEL := 3;
		P_LOAD_FORECAST_REV_STG(G_RUN) ;
		L_LEVEL := 4;
		P_LOAD_REVENUE;
		L_LEVEL := 5;
		DBMS_OUTPUT.PUT_LINE('DWBS_SUCCESS') ;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), NULL) ;
		DBMS_OUTPUT.PUT_LINE('DWBS_FAILURE') ;
	END P_LOAD_REVENUE_RELEASE;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Load the Commission Amortization data
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_LOAD_COMM_AMORTIZATION(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_LOAD_COMM_AMORTIZATION';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		P_TRUNCATE_LISTED_TABLE('DBO', 'SY_030_FORECAST_COMM_STG') ;
		L_LEVEL := 2;
		P_DEL_COMM_AMORT_RUN_PRD(G_RUN) ;
		L_LEVEL := 3;
		P_LOAD_FORECAST_COMM_STG(G_RUN) ;
		L_LEVEL := 4;
		P_LOAD_COMMISSION;
		L_LEVEL := 5;
		DBMS_OUTPUT.PUT_LINE('DWBS_SUCCESS') ;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), NULL) ;
		DBMS_OUTPUT.PUT_LINE('DWBS_FAILURE') ;
	END P_LOAD_COMM_AMORTIZATION;
/***********************************************************************************
*
* Author: Jaishankar SP
* Description: Main Procedure to delete the revenue release and commission data for run period older than 36 months
*
* Parameters: None
*
* Revisions:
*
*   Change Date    Change Description
*   -----------    ------------------
***********************************************************************************/
	PROCEDURE P_DEL_OLD_REV_COMM(
			G_RUN IN DATE)
	IS
		L_PROC_NAME CONSTANT T_IDENTIFIER := 'P_DEL_OLD_REV_COMM';
		L_LEVEL     INTEGER := 0;
	BEGIN
		L_LEVEL := 1;
		P_DEL_REV_COMM_RUN(G_RUN) ;
		L_LEVEL := 2;
		DBMS_OUTPUT.PUT_LINE('DWBS_SUCCESS') ;
	EXCEPTION
	WHEN OTHERS THEN
		P_PROCESS_ERRORS(G_PKG_NAME, L_PROC_NAME, L_LEVEL, SUBSTR(SQLERRM, 1, 255), NULL) ;
		DBMS_OUTPUT.PUT_LINE('DWBS_FAILURE') ;
	END P_DEL_OLD_REV_COMM;
END;